# Copyright 2018-2024 Xanadu Quantum Technologies Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Unit Tests for the taylor hamiltonian construction functions."""
import sys

import numpy as np
import pytest

import pennylane as qml
from pennylane.bose import BoseWord
from pennylane.qchem import vibrational
from pennylane.qchem.vibrational.taylor_ham import (
    _fit_onebody,
    _fit_threebody,
    _fit_twobody,
    _remove_harmonic,
    _taylor_anharmonic,
    _taylor_harmonic,
    _taylor_kinetic,
    _threebody_degs,
    _twobody_degs,
    taylor_bosonic,
    taylor_coeffs,
    taylor_dipole_coeffs,
    taylor_hamiltonian,
)

# pylint: disable=unused-import, import-outside-toplevel

sym = ["H", "H", "S"]
geom = np.array([[0.0, -1.0, -1.0], [0.0, 1.0, -1.0], [0.0, 0.0, 0.0]])

try:
    import geometric
    import pyscf

    mol = qml.qchem.Molecule(sym, geom, basis_name="6-31g", unit="Angstrom", load_data=True)
    test_pes_object = vibrational.vibrational_pes(mol, dipole_level=2, cubic=True, localize=True)
except ModuleNotFoundError:
    pass


# Reference copied from vibrant HDF5 files
# mol = H2S
# coords =[[0.0, -1.0, -1.0], [0.0, 1.0, -1.0], [0.0, 0.0, 0.0]]
# localize = True
taylor_1D = np.array(
    [
        [1.01030577e-05, -4.47405417e-05, -1.10879929e-05],
        [-7.12792255e-05, -1.38984154e-03, 1.84471155e-04],
        [-7.12793370e-05, -1.38984152e-03, 1.84471151e-04],
    ]
)

taylor_2D = np.array(
    [
        [
            [
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
            ],
            [
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
            ],
            [
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
            ],
        ],
        [
            [
                -5.31504581e-05,
                1.26195669e-04,
                4.59577981e-04,
                -3.19150467e-05,
                -2.12745957e-04,
                2.58007346e-05,
            ],
            [
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
            ],
            [
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
            ],
        ],
        [
            [
                -5.31505500e-05,
                1.26195707e-04,
                4.59577965e-04,
                -3.19150532e-05,
                -2.12745955e-04,
                2.58007383e-05,
            ],
            [
                -1.27269515e-04,
                1.13495645e-05,
                1.13497539e-05,
                -1.88516283e-06,
                1.92460286e-06,
                -1.88519488e-06,
            ],
            [
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
            ],
        ],
    ]
)

taylor_3D = np.array(
    [
        [
            [
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
            ],
            [
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
            ],
            [
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
            ],
        ],
        [
            [
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
            ],
            [
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
            ],
            [
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
            ],
        ],
        [
            [
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
            ],
            [
                [-1.91690218e-04, 4.04877496e-05, -1.76014298e-05, -1.76014291e-05],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
            ],
            [
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
                [0.00000000e00, 0.00000000e00, 0.00000000e00, 0.00000000e00],
            ],
        ],
    ]
)

freqs = [0.00589689, 0.01232428, 0.01232428]

uloc = [
    [1.0, 0.0, 0.0],
    [0.0, -0.70710712, -0.70710644],
    [0.0, -0.70710644, 0.70710712],
]

# Pre-sorted
reference_taylor_bosonic_coeffs = np.array(
    [
        -0.0014741495669876705,
        -0.0014741495669876705,
        -0.0014741495436878212,
        -0.0014741495436878212,
        -0.0013076515364979621,
        -0.0013076515364979621,
        -0.00130765145178359,
        -0.00130765145178359,
        -0.0004913831889958902,
        -0.0004913831889958902,
        -0.0004913831812292737,
        -0.0004913831812292737,
        -0.00021274595723421176,
        -0.00021274595487619645,
        (-0.00011795343850034418 + 0j),
        (-0.00011795343850034418 + 0j),
        -0.00010637297861710588,
        -0.00010637297861710588,
        -0.00010637297861710588,
        -0.00010637297861710588,
        -0.00010637297743809822,
        -0.00010637297743809822,
        -0.00010637297743809822,
        -0.00010637297743809822,
        -6.646252603025534e-05,
        -6.646252603025534e-05,
        -6.646252603025534e-05,
        -6.646252603025534e-05,
        -5.318648930855294e-05,
        -5.318648930855294e-05,
        -5.318648930855294e-05,
        -5.318648930855294e-05,
        -5.318648871904911e-05,
        -5.318648871904911e-05,
        -5.318648871904911e-05,
        -5.318648871904911e-05,
        -4.745451061101081e-05,
        -4.745451061101081e-05,
        -3.1161011194140255e-05,
        -3.1161011194140255e-05,
        -3.1161011194140255e-05,
        -3.1161011194140255e-05,
        -3.116096311120378e-05,
        -3.116096311120378e-05,
        -3.116096311120378e-05,
        -3.116096311120378e-05,
        -2.3936289911948183e-05,
        -2.3936289911948183e-05,
        -2.3936289911948183e-05,
        -2.3936289911948183e-05,
        -2.393628503037501e-05,
        -2.393628503037501e-05,
        -2.393628503037501e-05,
        -2.393628503037501e-05,
        -1.663198932563437e-05,
        -1.581817020367027e-05,
        -1.581817020367027e-05,
        -1.1087992883756245e-05,
        -1.1087992883756245e-05,
        -7.978763303982728e-06,
        -7.978763303982728e-06,
        -7.978763303982728e-06,
        -7.978763303982728e-06,
        -7.97876167679167e-06,
        -7.97876167679167e-06,
        -7.97876167679167e-06,
        -7.97876167679167e-06,
        -2.771998220939061e-06,
        -2.771998220939061e-06,
        -1.4138961572840636e-06,
        -1.4138961572840636e-06,
        -1.4138961572840636e-06,
        -1.4138961572840636e-06,
        -1.4138721238216464e-06,
        -1.4138721238216464e-06,
        -1.4138721238216464e-06,
        -1.4138721238216464e-06,
        -4.7129871909468786e-07,
        -4.7129871909468786e-07,
        -4.7129871909468786e-07,
        -4.7129871909468786e-07,
        -4.712907079405488e-07,
        -4.712907079405488e-07,
        -4.712907079405488e-07,
        -4.712907079405488e-07,
        4.811507148005317e-07,
        4.811507148005317e-07,
        4.811507148005317e-07,
        4.811507148005317e-07,
        9.623014296010633e-07,
        9.623014296010633e-07,
        9.623014296010633e-07,
        9.623014296010633e-07,
        1.9246028592021267e-06,
        4.012677014466219e-06,
        4.012677014466219e-06,
        4.012677014466219e-06,
        4.012677014466219e-06,
        4.012743974048166e-06,
        4.012743974048166e-06,
        4.012743974048166e-06,
        4.012743974048166e-06,
        6.450183658722912e-06,
        6.450183658722912e-06,
        6.450183658722912e-06,
        6.450183658722912e-06,
        6.450184566334329e-06,
        6.450184566334329e-06,
        6.450184566334329e-06,
        6.450184566334329e-06,
        8.025354028932438e-06,
        8.025354028932438e-06,
        8.025487948096332e-06,
        8.025487948096332e-06,
        1.9350550976168735e-05,
        1.9350550976168735e-05,
        1.9350550976168735e-05,
        1.9350550976168735e-05,
        1.9350553699002985e-05,
        1.9350553699002985e-05,
        1.9350553699002985e-05,
        1.9350553699002985e-05,
        4.1779316146677584e-05,
        4.1779316146677584e-05,
        4.461690659578001e-05,
        4.461690659578001e-05,
        4.461690659578001e-05,
        4.461690659578001e-05,
        4.461692016190839e-05,
        4.461692016190839e-05,
        4.461692016190839e-05,
        4.461692016190839e-05,
        4.611778769584726e-05,
        4.611778769584726e-05,
        4.611778866220354e-05,
        4.611778866220354e-05,
        8.923381319156002e-05,
        8.923381319156002e-05,
        8.923384032381677e-05,
        8.923384032381677e-05,
        0.00016248534793018287,
        0.00016248534793018287,
        0.00016248534793018287,
        0.00016248534793018287,
        0.0001624853534752421,
        0.0001624853534752421,
        0.0001624853534752421,
        0.0001624853534752421,
        0.00018447115078338905,
        0.00018447115078338905,
        0.00018447115464881417,
        0.00018447115464881417,
        (0.00018836171968557433 + 0j),
        (0.00018836171968557433 + 0j),
        (0.0001883617806066767 + 0j),
        (0.0001883617806066767 + 0j),
        0.0002767067261750836,
        0.0002767067319732213,
        0.00032497069586036575,
        0.00032497069586036575,
        0.0003249707069504842,
        0.0003249707069504842,
        (0.0056609811549201625 + 0j),
        (0.012701001932649118 + 0j),
        (0.012701001935554193 + 0j),
        (0.015368993604463204 + 0j),
    ]
)

# Pre-sorted, operators with indices in ascending order
reference_taylor_bosonic_ops = [
    {(0, 1): "+", (1, 1): "+", (2, 1): "-"},
    {(0, 1): "+", (1, 1): "-", (2, 1): "-"},
    {(0, 2): "+", (1, 2): "+", (2, 2): "-"},
    {(0, 2): "+", (1, 2): "-", (2, 2): "-"},
    {(0, 1): "+"},
    {(0, 1): "-"},
    {(0, 2): "+"},
    {(0, 2): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "+"},
    {(0, 1): "-", (1, 1): "-", (2, 1): "-"},
    {(0, 2): "+", (1, 2): "+", (2, 2): "+"},
    {(0, 2): "-", (1, 2): "-", (2, 2): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 0): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 0): "-", (3, 2): "-"},
    {(0, 0): "+", (1, 0): "+"},
    {(0, 0): "-", (1, 0): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 1): "+", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 1): "+", (3, 1): "-"},
    {(0, 1): "+", (1, 0): "-", (2, 0): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 2): "+", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 2): "+", (3, 2): "-"},
    {(0, 2): "+", (1, 0): "-", (2, 0): "-", (3, 2): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+"},
    {(0, 2): "+", (1, 1): "-"},
    {(0, 1): "+", (1, 2): "-"},
    {(0, 1): "-", (1, 2): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 1): "+", (3, 1): "+"},
    {(0, 1): "+", (1, 1): "+", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "-", (1, 0): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 2): "+", (3, 2): "+"},
    {(0, 2): "+", (1, 2): "+", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 2): "-", (3, 2): "-"},
    {(0, 0): "-", (1, 0): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 0): "-"},
    {(0, 0): "+", (1, 2): "+"},
    {(0, 2): "+", (1, 0): "-"},
    {(0, 0): "+", (1, 2): "-"},
    {(0, 0): "-", (1, 2): "-"},
    {(0, 0): "+", (1, 1): "+"},
    {(0, 1): "+", (1, 0): "-"},
    {(0, 0): "+", (1, 1): "-"},
    {(0, 0): "-", (1, 1): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 2): "+", (3, 2): "-"},
    {(0, 2): "+", (1, 2): "+", (2, 0): "-", (3, 2): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 2): "-", (3, 2): "-"},
    {(0, 2): "+", (1, 0): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 1): "+", (3, 1): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 0): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 1): "-", (3, 1): "-"},
    {(0, 1): "+", (1, 0): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "+"},
    {(0, 0): "-", (1, 0): "-", (2, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 2): "+", (3, 2): "+"},
    {(0, 2): "+", (1, 2): "+", (2, 2): "+", (3, 0): "-"},
    {(0, 0): "+", (1, 2): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 0): "-", (1, 2): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 1): "+", (3, 1): "+"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "+", (3, 0): "-"},
    {(0, 0): "+", (1, 1): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "-", (1, 1): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 0): "+"},
    {(0, 0): "-", (1, 0): "-", (2, 0): "-", (3, 0): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 2): "+", (3, 1): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 1): "-", (3, 1): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 1): "-", (2, 1): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 2): "+", (3, 2): "-"},
    {(0, 2): "+", (1, 2): "+", (2, 1): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 2): "-", (3, 2): "-"},
    {(0, 2): "+", (1, 1): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "+", (3, 2): "+"},
    {(0, 2): "+", (1, 1): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "+", (3, 2): "-"},
    {(0, 1): "-", (1, 1): "-", (2, 1): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 2): "+", (3, 2): "+"},
    {(0, 2): "+", (1, 2): "+", (2, 2): "+", (3, 1): "-"},
    {(0, 1): "+", (1, 2): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "-", (1, 2): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 2): "+", (3, 2): "+"},
    {(0, 2): "+", (1, 2): "+", (2, 1): "-", (3, 1): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "-", (1, 1): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 2): "+", (3, 1): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 2): "+", (3, 2): "-"},
    {(0, 2): "+", (1, 1): "-", (2, 1): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 1): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 1): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 2): "+"},
    {(0, 2): "+", (1, 2): "+", (2, 1): "-"},
    {(0, 1): "+", (1, 2): "-", (2, 2): "-"},
    {(0, 1): "-", (1, 2): "-", (2, 2): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 2): "+"},
    {(0, 2): "+", (1, 1): "-", (2, 1): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 2): "-"},
    {(0, 1): "-", (1, 1): "-", (2, 2): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 1): "+"},
    {(0, 1): "+", (1, 0): "-", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 1): "-"},
    {(0, 0): "-", (1, 0): "-", (2, 0): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 2): "+"},
    {(0, 2): "+", (1, 0): "-", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 2): "-"},
    {(0, 0): "-", (1, 0): "-", (2, 0): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 2): "-"},
    {(0, 2): "+", (1, 1): "-", (2, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 1): "-"},
    {(0, 1): "+", (1, 1): "-", (2, 2): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 1): "+", (3, 0): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 0): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 2): "+", (3, 0): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "-", (3, 2): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 0): "-", (3, 2): "-"},
    {(0, 0): "+"},
    {(0, 0): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 1): "+"},
    {(0, 1): "+", (1, 1): "+", (2, 0): "-"},
    {(0, 0): "+", (1, 1): "-", (2, 1): "-"},
    {(0, 0): "-", (1, 1): "-", (2, 1): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 2): "+"},
    {(0, 2): "+", (1, 2): "+", (2, 0): "-"},
    {(0, 0): "+", (1, 2): "-", (2, 2): "-"},
    {(0, 0): "-", (1, 2): "-", (2, 2): "-"},
    {(0, 2): "+", (1, 2): "+", (2, 2): "+", (3, 2): "+"},
    {(0, 2): "-", (1, 2): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "+", (3, 1): "+"},
    {(0, 1): "-", (1, 1): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 1): "-"},
    {(0, 1): "+", (1, 0): "-", (2, 1): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 2): "-"},
    {(0, 2): "+", (1, 0): "-", (2, 2): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 2): "+"},
    {(0, 2): "+", (1, 0): "-", (2, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 2): "-"},
    {(0, 0): "-", (1, 0): "-", (2, 2): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 1): "+"},
    {(0, 1): "+", (1, 0): "-", (2, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 1): "-"},
    {(0, 0): "-", (1, 0): "-", (2, 1): "-"},
    {(0, 2): "+", (1, 2): "+", (2, 2): "+", (3, 2): "-"},
    {(0, 2): "+", (1, 2): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "+", (3, 1): "-"},
    {(0, 1): "+", (1, 1): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 2): "+", (1, 2): "+"},
    {(0, 2): "-", (1, 2): "-"},
    {(0, 1): "+", (1, 1): "+"},
    {(0, 1): "-", (1, 1): "-"},
    {(0, 2): "+", (1, 2): "+", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 0): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 2): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 0): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 1): "-"},
    {(0, 0): "+", (1, 0): "-"},
    {(0, 2): "+", (1, 2): "-"},
    {(0, 1): "+", (1, 1): "-"},
    {},
]


for i, ele in enumerate(reference_taylor_bosonic_ops):
    reference_taylor_bosonic_ops[i] = BoseWord(ele)


def test_import_sklearn(monkeypatch):
    """Test if an ImportError is raised by _import_sklearn function."""
    # pylint: disable=protected-access

    with monkeypatch.context() as m:
        m.setitem(sys.modules, "sklearn", None)

        with pytest.raises(ImportError, match="This feature requires sklearn"):
            vibrational.taylor_ham._import_sklearn()


def test_taylor_anharmonic():
    expected_anh_ham = [
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 0): "+"}), -1.5818170215014748e-05),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 0): "-"}), -4.7454510645044245e-05),
        (BoseWord({(0, 0): "+"}), 4.177931609625755e-05),
        (BoseWord({(0, 0): "+", (1, 0): "-", (2, 0): "-"}), -4.7454510645044245e-05),
        (BoseWord({(0, 0): "-"}), 4.177931609625755e-05),
        (BoseWord({(0, 0): "-", (1, 0): "-", (2, 0): "-"}), -1.5818170215014748e-05),
        (BoseWord({(0, 0): "+", (1, 0): "+"}), -0.00011795343849999994),
        (BoseWord({(0, 0): "+", (1, 0): "-"}), -0.00023590687699999988),
        (BoseWord({}), 9.627115513999998e-05),
        (BoseWord({(0, 0): "-", (1, 0): "-"}), -0.00011795343849999994),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 0): "+"}), -2.7719982249999993e-06),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 0): "-"}), -1.1087992899999997e-05),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 0): "-", (3, 0): "-"}), -1.6631989349999996e-05),
        (BoseWord({(0, 0): "+", (1, 0): "-", (2, 0): "-", (3, 0): "-"}), -1.1087992899999997e-05),
        (BoseWord({(0, 0): "-", (1, 0): "-", (2, 0): "-", (3, 0): "-"}), -2.7719982249999993e-06),
        (BoseWord({(0, 1): "+", (1, 1): "+"}), 0.00018836178121499995),
        (BoseWord({(0, 1): "+", (1, 1): "-"}), 0.0003767235624299999),
        (BoseWord({(0, 1): "-", (1, 1): "-"}), 0.00018836178121499995),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 1): "+"}), -0.000491383188854377),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 1): "-"}), -0.001474149566563131),
        (BoseWord({(0, 1): "+"}), -0.0013076515361278378),
        (BoseWord({(0, 1): "+", (1, 1): "-", (2, 1): "-"}), -0.001474149566563131),
        (BoseWord({(0, 1): "-"}), -0.0013076515361278378),
        (BoseWord({(0, 1): "-", (1, 1): "-", (2, 1): "-"}), -0.000491383188854377),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 1): "+", (3, 1): "+"}), 4.6117788749999985e-05),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 1): "+", (3, 1): "-"}), 0.00018447115499999994),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 1): "-", (3, 1): "-"}), 0.0002767067324999999),
        (BoseWord({(0, 1): "+", (1, 1): "-", (2, 1): "-", (3, 1): "-"}), 0.00018447115499999994),
        (BoseWord({(0, 1): "-", (1, 1): "-", (2, 1): "-", (3, 1): "-"}), 4.6117788749999985e-05),
        (BoseWord({(0, 2): "+", (1, 2): "+"}), 0.00018836171996499998),
        (BoseWord({(0, 2): "+", (1, 2): "-"}), 0.00037672343992999996),
        (BoseWord({(0, 2): "-", (1, 2): "-"}), 0.00018836171996499998),
        (BoseWord({(0, 2): "+", (1, 2): "+", (2, 2): "+"}), -0.0004913831817833092),
        (BoseWord({(0, 2): "+", (1, 2): "+", (2, 2): "-"}), -0.0014741495453499277),
        (BoseWord({(0, 2): "+"}), -0.0013076514536084765),
        (BoseWord({(0, 2): "+", (1, 2): "-", (2, 2): "-"}), -0.0014741495453499277),
        (BoseWord({(0, 2): "-"}), -0.0013076514536084765),
        (BoseWord({(0, 2): "-", (1, 2): "-", (2, 2): "-"}), -0.0004913831817833092),
        (BoseWord({(0, 2): "+", (1, 2): "+", (2, 2): "+", (3, 2): "+"}), 4.611778774999999e-05),
        (BoseWord({(0, 2): "+", (1, 2): "+", (2, 2): "+", (3, 2): "-"}), 0.00018447115099999996),
        (BoseWord({(0, 2): "+", (1, 2): "+", (2, 2): "-", (3, 2): "-"}), 0.0002767067264999999),
        (BoseWord({(0, 2): "+", (1, 2): "-", (2, 2): "-", (3, 2): "-"}), 0.00018447115099999996),
        (BoseWord({(0, 2): "-", (1, 2): "-", (2, 2): "-", (3, 2): "-"}), 4.611778774999999e-05),
        (BoseWord({(0, 0): "+", (1, 1): "+"}), -3.1160963125e-05),
        (BoseWord({(0, 1): "+", (1, 0): "-"}), -3.1160963125e-05),
        (BoseWord({(0, 0): "+", (1, 1): "-"}), -3.1160963125e-05),
        (BoseWord({(0, 0): "-", (1, 1): "-"}), -3.1160963125e-05),
        (BoseWord({(0, 0): "+", (1, 1): "+", (2, 1): "+"}), 4.461690665313647e-05),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 0): "-"}), 4.461690665313647e-05),
        (BoseWord({(0, 0): "+", (1, 1): "+", (2, 1): "-"}), 8.923381330627295e-05),
        (BoseWord({(0, 1): "+", (1, 0): "-", (2, 1): "-"}), 8.923381330627295e-05),
        (BoseWord({(0, 0): "+", (1, 1): "-", (2, 1): "-"}), 4.461690665313647e-05),
        (BoseWord({(0, 0): "-", (1, 1): "-", (2, 1): "-"}), 4.461690665313647e-05),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 1): "+"}), 0.0001624853534245611),
        (BoseWord({(0, 0): "+", (1, 1): "+", (2, 0): "-"}), 0.0003249707068491222),
        (BoseWord({(0, 1): "+", (1, 0): "-", (2, 0): "-"}), 0.0001624853534245611),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 1): "-"}), 0.0001624853534245611),
        (BoseWord({(0, 0): "+", (1, 0): "-", (2, 1): "-"}), 0.0003249707068491222),
        (BoseWord({(0, 0): "-", (1, 0): "-", (2, 1): "-"}), 0.0001624853534245611),
        (BoseWord({(0, 0): "+", (1, 1): "+", (2, 1): "+", (3, 1): "+"}), -7.978761674999999e-06),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 1): "+", (3, 0): "-"}), -7.978761674999999e-06),
        (BoseWord({(0, 0): "+", (1, 1): "+", (2, 1): "+", (3, 1): "-"}), -2.3936285024999997e-05),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 0): "-", (3, 1): "-"}), -2.3936285024999997e-05),
        (BoseWord({(0, 0): "+", (1, 1): "+", (2, 1): "-", (3, 1): "-"}), -2.3936285024999997e-05),
        (BoseWord({(0, 1): "+", (1, 0): "-", (2, 1): "-", (3, 1): "-"}), -2.3936285024999997e-05),
        (BoseWord({(0, 0): "+", (1, 1): "-", (2, 1): "-", (3, 1): "-"}), -7.978761674999999e-06),
        (BoseWord({(0, 0): "-", (1, 1): "-", (2, 1): "-", (3, 1): "-"}), -7.978761674999999e-06),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 1): "+", (3, 1): "+"}), -5.318648924999997e-05),
        (BoseWord({(0, 0): "+", (1, 1): "+", (2, 1): "+", (3, 0): "-"}), -0.00010637297849999994),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 0): "-", (3, 0): "-"}), -5.318648924999997e-05),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 1): "+", (3, 1): "-"}), -0.00010637297849999994),
        (BoseWord({(0, 0): "+", (1, 1): "+", (2, 0): "-", (3, 1): "-"}), -0.00021274595699999989),
        (BoseWord({(0, 1): "+", (1, 0): "-", (2, 0): "-", (3, 1): "-"}), -0.00010637297849999994),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 1): "-", (3, 1): "-"}), -5.318648924999997e-05),
        (BoseWord({(0, 0): "+", (1, 0): "-", (2, 1): "-", (3, 1): "-"}), -0.00010637297849999994),
        (BoseWord({(0, 0): "-", (1, 0): "-", (2, 1): "-", (3, 1): "-"}), -5.318648924999997e-05),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 1): "+"}), 6.450183649999998e-06),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 1): "+", (3, 0): "-"}), 1.9350550949999994e-05),
        (BoseWord({(0, 0): "+", (1, 1): "+", (2, 0): "-", (3, 0): "-"}), 1.9350550949999994e-05),
        (BoseWord({(0, 1): "+", (1, 0): "-", (2, 0): "-", (3, 0): "-"}), 6.450183649999998e-06),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 1): "-"}), 6.450183649999998e-06),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 0): "-", (3, 1): "-"}), 1.9350550949999994e-05),
        (BoseWord({(0, 0): "+", (1, 0): "-", (2, 0): "-", (3, 1): "-"}), 1.9350550949999994e-05),
        (BoseWord({(0, 0): "-", (1, 0): "-", (2, 0): "-", (3, 1): "-"}), 6.450183649999998e-06),
        (BoseWord({(0, 0): "+", (1, 2): "+"}), -3.1161011174999994e-05),
        (BoseWord({(0, 2): "+", (1, 0): "-"}), -3.1161011174999994e-05),
        (BoseWord({(0, 0): "+", (1, 2): "-"}), -3.1161011174999994e-05),
        (BoseWord({(0, 0): "-", (1, 2): "-"}), -3.1161011174999994e-05),
        (BoseWord({(0, 0): "+", (1, 2): "+", (2, 2): "+"}), 4.461692008816532e-05),
        (BoseWord({(0, 2): "+", (1, 2): "+", (2, 0): "-"}), 4.461692008816532e-05),
        (BoseWord({(0, 0): "+", (1, 2): "+", (2, 2): "-"}), 8.923384017633064e-05),
        (BoseWord({(0, 2): "+", (1, 0): "-", (2, 2): "-"}), 8.923384017633064e-05),
        (BoseWord({(0, 0): "+", (1, 2): "-", (2, 2): "-"}), 4.461692008816532e-05),
        (BoseWord({(0, 0): "-", (1, 2): "-", (2, 2): "-"}), 4.461692008816532e-05),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 2): "+"}), 0.00016248534776770686),
        (BoseWord({(0, 0): "+", (1, 2): "+", (2, 0): "-"}), 0.0003249706955354137),
        (BoseWord({(0, 2): "+", (1, 0): "-", (2, 0): "-"}), 0.00016248534776770686),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 2): "-"}), 0.00016248534776770686),
        (BoseWord({(0, 0): "+", (1, 0): "-", (2, 2): "-"}), 0.0003249706955354137),
        (BoseWord({(0, 0): "-", (1, 0): "-", (2, 2): "-"}), 0.00016248534776770686),
        (BoseWord({(0, 0): "+", (1, 2): "+", (2, 2): "+", (3, 2): "+"}), -7.978763299999997e-06),
        (BoseWord({(0, 2): "+", (1, 2): "+", (2, 2): "+", (3, 0): "-"}), -7.978763299999997e-06),
        (BoseWord({(0, 0): "+", (1, 2): "+", (2, 2): "+", (3, 2): "-"}), -2.393628989999999e-05),
        (BoseWord({(0, 2): "+", (1, 2): "+", (2, 0): "-", (3, 2): "-"}), -2.393628989999999e-05),
        (BoseWord({(0, 0): "+", (1, 2): "+", (2, 2): "-", (3, 2): "-"}), -2.393628989999999e-05),
        (BoseWord({(0, 2): "+", (1, 0): "-", (2, 2): "-", (3, 2): "-"}), -2.393628989999999e-05),
        (BoseWord({(0, 0): "+", (1, 2): "-", (2, 2): "-", (3, 2): "-"}), -7.978763299999997e-06),
        (BoseWord({(0, 0): "-", (1, 2): "-", (2, 2): "-", (3, 2): "-"}), -7.978763299999997e-06),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 2): "+", (3, 2): "+"}), -5.3186488749999974e-05),
        (BoseWord({(0, 0): "+", (1, 2): "+", (2, 2): "+", (3, 0): "-"}), -0.00010637297749999995),
        (BoseWord({(0, 2): "+", (1, 2): "+", (2, 0): "-", (3, 0): "-"}), -5.3186488749999974e-05),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 2): "+", (3, 2): "-"}), -0.00010637297749999995),
        (BoseWord({(0, 0): "+", (1, 2): "+", (2, 0): "-", (3, 2): "-"}), -0.0002127459549999999),
        (BoseWord({(0, 2): "+", (1, 0): "-", (2, 0): "-", (3, 2): "-"}), -0.00010637297749999995),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 2): "-", (3, 2): "-"}), -5.3186488749999974e-05),
        (BoseWord({(0, 0): "+", (1, 0): "-", (2, 2): "-", (3, 2): "-"}), -0.00010637297749999995),
        (BoseWord({(0, 0): "-", (1, 0): "-", (2, 2): "-", (3, 2): "-"}), -5.3186488749999974e-05),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 2): "+"}), 6.450184574999998e-06),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 2): "+", (3, 0): "-"}), 1.935055372499999e-05),
        (BoseWord({(0, 0): "+", (1, 2): "+", (2, 0): "-", (3, 0): "-"}), 1.935055372499999e-05),
        (BoseWord({(0, 2): "+", (1, 0): "-", (2, 0): "-", (3, 0): "-"}), 6.450184574999998e-06),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 2): "-"}), 6.450184574999998e-06),
        (BoseWord({(0, 0): "+", (1, 0): "+", (2, 0): "-", (3, 2): "-"}), 1.935055372499999e-05),
        (BoseWord({(0, 0): "+", (1, 0): "-", (2, 0): "-", (3, 2): "-"}), 1.935055372499999e-05),
        (BoseWord({(0, 0): "-", (1, 0): "-", (2, 0): "-", (3, 2): "-"}), 6.450184574999998e-06),
        (BoseWord({(0, 1): "+", (1, 2): "+"}), -6.646252578249999e-05),
        (BoseWord({(0, 2): "+", (1, 1): "-"}), -6.646252578249999e-05),
        (BoseWord({(0, 1): "+", (1, 2): "-"}), -6.646252578249999e-05),
        (BoseWord({(0, 1): "-", (1, 2): "-"}), -6.646252578249999e-05),
        (BoseWord({(0, 1): "+", (1, 2): "+", (2, 2): "+"}), 4.012677010732053e-06),
        (BoseWord({(0, 2): "+", (1, 2): "+", (2, 1): "-"}), 4.012677010732053e-06),
        (BoseWord({(0, 1): "+", (1, 2): "+", (2, 2): "-"}), 8.025354021464107e-06),
        (BoseWord({(0, 2): "+", (1, 1): "-", (2, 2): "-"}), 8.025354021464107e-06),
        (BoseWord({(0, 1): "+", (1, 2): "-", (2, 2): "-"}), 4.012677010732053e-06),
        (BoseWord({(0, 1): "-", (1, 2): "-", (2, 2): "-"}), 4.012677010732053e-06),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 2): "+"}), 4.012743973744231e-06),
        (BoseWord({(0, 1): "+", (1, 2): "+", (2, 1): "-"}), 8.025487947488462e-06),
        (BoseWord({(0, 2): "+", (1, 1): "-", (2, 1): "-"}), 4.012743973744231e-06),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 2): "-"}), 4.012743973744231e-06),
        (BoseWord({(0, 1): "+", (1, 1): "-", (2, 2): "-"}), 8.025487947488462e-06),
        (BoseWord({(0, 1): "-", (1, 1): "-", (2, 2): "-"}), 4.012743973744231e-06),
        (BoseWord({(0, 1): "+", (1, 2): "+", (2, 2): "+", (3, 2): "+"}), -4.712907074999999e-07),
        (BoseWord({(0, 2): "+", (1, 2): "+", (2, 2): "+", (3, 1): "-"}), -4.712907074999999e-07),
        (BoseWord({(0, 1): "+", (1, 2): "+", (2, 2): "+", (3, 2): "-"}), -1.4138721224999998e-06),
        (BoseWord({(0, 2): "+", (1, 2): "+", (2, 1): "-", (3, 2): "-"}), -1.4138721224999998e-06),
        (BoseWord({(0, 1): "+", (1, 2): "+", (2, 2): "-", (3, 2): "-"}), -1.4138721224999998e-06),
        (BoseWord({(0, 2): "+", (1, 1): "-", (2, 2): "-", (3, 2): "-"}), -1.4138721224999998e-06),
        (BoseWord({(0, 1): "+", (1, 2): "-", (2, 2): "-", (3, 2): "-"}), -4.712907074999999e-07),
        (BoseWord({(0, 1): "-", (1, 2): "-", (2, 2): "-", (3, 2): "-"}), -4.712907074999999e-07),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 2): "+", (3, 2): "+"}), 4.811507149999998e-07),
        (BoseWord({(0, 1): "+", (1, 2): "+", (2, 2): "+", (3, 1): "-"}), 9.623014299999996e-07),
        (BoseWord({(0, 2): "+", (1, 2): "+", (2, 1): "-", (3, 1): "-"}), 4.811507149999998e-07),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 2): "+", (3, 2): "-"}), 9.623014299999996e-07),
        (BoseWord({(0, 1): "+", (1, 2): "+", (2, 1): "-", (3, 2): "-"}), 1.924602859999999e-06),
        (BoseWord({(0, 2): "+", (1, 1): "-", (2, 1): "-", (3, 2): "-"}), 9.623014299999996e-07),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 2): "-", (3, 2): "-"}), 4.811507149999998e-07),
        (BoseWord({(0, 1): "+", (1, 1): "-", (2, 2): "-", (3, 2): "-"}), 9.623014299999996e-07),
        (BoseWord({(0, 1): "-", (1, 1): "-", (2, 2): "-", (3, 2): "-"}), 4.811507149999998e-07),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 1): "+", (3, 2): "+"}), -4.7129871999999985e-07),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 2): "+", (3, 1): "-"}), -1.4138961599999995e-06),
        (BoseWord({(0, 1): "+", (1, 2): "+", (2, 1): "-", (3, 1): "-"}), -1.4138961599999995e-06),
        (BoseWord({(0, 2): "+", (1, 1): "-", (2, 1): "-", (3, 1): "-"}), -4.7129871999999985e-07),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 1): "+", (3, 2): "-"}), -4.7129871999999985e-07),
        (BoseWord({(0, 1): "+", (1, 1): "+", (2, 1): "-", (3, 2): "-"}), -1.4138961599999995e-06),
        (BoseWord({(0, 1): "+", (1, 1): "-", (2, 1): "-", (3, 2): "-"}), -1.4138961599999995e-06),
        (BoseWord({(0, 1): "-", (1, 1): "-", (2, 1): "-", (3, 2): "-"}), -4.7129871999999985e-07),
    ]
    anh_ham = _taylor_anharmonic([taylor_1D, taylor_2D])

    assert expected_anh_ham == list(anh_ham.items())


@pytest.mark.usefixtures(
    "skip_if_no_pyscf_support", "skip_if_no_geometric_support", "skip_if_no_sklearn_support"
)
def test_taylor_harmonic():
    expected_taylor_harm = [
        (BoseWord({(0, 0): "+", (1, 0): "+"}), 0.0014742224999999996),
        (BoseWord({(0, 0): "+", (1, 0): "-"}), 0.002948444999999999),
        (BoseWord({}), 0.007636362499999998),
        (BoseWord({(0, 0): "-", (1, 0): "-"}), 0.0014742224999999996),
        (BoseWord({(0, 1): "+", (1, 1): "+"}), 0.003081069999999999),
        (BoseWord({(0, 1): "+", (1, 1): "-"}), 0.006162139999999998),
        (BoseWord({(0, 1): "-", (1, 1): "-"}), 0.003081069999999999),
        (BoseWord({(0, 2): "+", (1, 2): "+"}), 0.003081069999999999),
        (BoseWord({(0, 2): "+", (1, 2): "-"}), 0.006162139999999998),
        (BoseWord({(0, 2): "-", (1, 2): "-"}), 0.003081069999999999),
    ]
    taylor_harm = _taylor_harmonic([taylor_1D, taylor_2D], freqs)
    assert expected_taylor_harm == list(taylor_harm.items())


def test_taylor_kinetic():
    expected_taylor_kin = [
        (BoseWord({(0, 0): "+", (1, 0): "+"}), (-0.0014742224999999994 + 0j)),
        (BoseWord({(0, 0): "+", (1, 0): "-"}), (0.0029484449999999988 + 0j)),
        (BoseWord({}), (0.00763636247932089 + 0j)),
        (BoseWord({(0, 0): "-", (1, 0): "-"}), (-0.0014742224999999994 + 0j)),
        (BoseWord({(0, 0): "+", (1, 1): "+"}), 0j),
        (BoseWord({(0, 0): "+", (1, 1): "-"}), 0j),
        (BoseWord({(0, 1): "+", (1, 0): "-"}), 0j),
        (BoseWord({(0, 0): "-", (1, 1): "-"}), 0j),
        (BoseWord({(0, 0): "+", (1, 2): "+"}), 0j),
        (BoseWord({(0, 0): "+", (1, 2): "-"}), 0j),
        (BoseWord({(0, 2): "+", (1, 0): "-"}), 0j),
        (BoseWord({(0, 0): "-", (1, 2): "-"}), 0j),
        (BoseWord({(0, 1): "+", (1, 1): "+"}), (-0.0030810699896604453 + 0j)),
        (BoseWord({(0, 1): "+", (1, 1): "-"}), (0.0061621399793208905 + 0j)),
        (BoseWord({(0, 1): "-", (1, 1): "-"}), (-0.0030810699896604453 + 0j)),
        (BoseWord({(0, 1): "+", (1, 2): "+"}), 0j),
        (BoseWord({(0, 1): "+", (1, 2): "-"}), 0j),
        (BoseWord({(0, 2): "+", (1, 1): "-"}), 0j),
        (BoseWord({(0, 1): "-", (1, 2): "-"}), 0j),
        (BoseWord({(0, 2): "+", (1, 2): "+"}), (-0.0030810699896604453 + 0j)),
        (BoseWord({(0, 2): "+", (1, 2): "-"}), (0.0061621399793208905 + 0j)),
        (BoseWord({(0, 2): "-", (1, 2): "-"}), (-0.0030810699896604453 + 0j)),
    ]
    taylor_kin = _taylor_kinetic([taylor_1D, taylor_2D], freqs, uloc=uloc)
    assert expected_taylor_kin == list(taylor_kin.items())


def test_taylor_bosonic():
    taylor_bos = taylor_bosonic([taylor_1D, taylor_2D], freqs, uloc=uloc)
    sorted_arr = sorted(taylor_bos.items(), key=lambda x: x[1].real)
    sorted_ops_arr, sorted_coeffs_arr = zip(*sorted_arr)

    assert np.allclose(
        abs(np.array(sorted_coeffs_arr)), abs(reference_taylor_bosonic_coeffs), atol=1e-10
    )
    assert len(sorted_ops_arr) == len(reference_taylor_bosonic_ops)
    assert list(sorted_ops_arr) == reference_taylor_bosonic_ops


@pytest.mark.usefixtures(
    "skip_if_no_pyscf_support", "skip_if_no_geometric_support", "skip_if_no_sklearn_support"
)
def test_taylor_hamiltonian():
    pes_object_2D = vibrational.vibrational_pes(mol, dipole_level=2, cubic=False, localize=True)

    taylor_ham = taylor_hamiltonian(pes_object_2D, 4, 2)
    taylor_bos = taylor_bosonic([taylor_1D, taylor_2D], freqs, uloc=uloc)

    assert len(taylor_ham) == len(taylor_bos)
    assert all(
        np.allclose(abs(taylor_bos.get(key)), abs(value), atol=1e-10)
        for key, value in taylor_ham.items()
    )


@pytest.mark.usefixtures(
    "skip_if_no_pyscf_support", "skip_if_no_geometric_support", "skip_if_no_sklearn_support"
)
def test_fit_onebody():
    anh_pes, _ = _remove_harmonic(test_pes_object.freqs, test_pes_object.pes_onemode)
    coeff_1D, _ = _fit_onebody(anh_pes, 4, 2)

    assert np.allclose(abs(coeff_1D), abs(taylor_1D), atol=1e-10)


@pytest.mark.usefixtures(
    "skip_if_no_pyscf_support", "skip_if_no_geometric_support", "skip_if_no_sklearn_support"
)
def test_fit_twobody():
    coeff_2D, _ = _fit_twobody(test_pes_object.pes_twomode, 4, 2)
    assert np.allclose(abs(coeff_2D), abs(taylor_2D), atol=1e-10)


@pytest.mark.usefixtures(
    "skip_if_no_pyscf_support", "skip_if_no_geometric_support", "skip_if_no_sklearn_support"
)
def test_fit_threebody():
    coeff_3D, _ = _fit_threebody(test_pes_object.pes_threemode, 4, 2)
    assert np.allclose(abs(coeff_3D), abs(taylor_3D), atol=1e-10)


def test_twomode_degs():
    expected_degs = [(1, 1), (2, 1), (1, 2), (3, 1), (2, 2), (1, 3)]
    fit_degs = _twobody_degs(4, 2)
    assert fit_degs == expected_degs


def test_threemode_degs():
    expected_degs = [(1, 1, 1), (1, 1, 2), (1, 2, 1), (2, 1, 1)]
    fit_degs = _threebody_degs(4, 2)
    assert fit_degs == expected_degs


@pytest.mark.usefixtures(
    "skip_if_no_pyscf_support", "skip_if_no_geometric_support", "skip_if_no_sklearn_support"
)
def test_taylor_coeffs():
    taylor_coeffs_1D, taylor_coeffs_2D, _ = taylor_coeffs(test_pes_object, 4, 2)
    assert np.allclose(taylor_coeffs_1D, taylor_1D, atol=1e-2)
    assert np.allclose(taylor_coeffs_2D, taylor_2D, atol=1e-2)


@pytest.mark.usefixtures(
    "skip_if_no_pyscf_support", "skip_if_no_geometric_support", "skip_if_no_sklearn_support"
)
def test_taylor_coeffs_dipole():
    expected_coeffs_x_arr = [
        np.array(
            [
                [1.45101915e-16, -8.57929776e-17, -1.96508555e-17, 9.05537757e-18],
                [8.07038739e-17, -2.55246776e-16, 1.26748652e-18, 2.86900384e-17],
                [3.17612270e-16, 9.88792957e-17, -5.06193374e-17, -9.06000149e-18],
            ]
        ),
        np.array(
            [
                [
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                ],
                [
                    [
                        6.28056138e-17,
                        1.10314274e-17,
                        3.85502051e-18,
                        -6.97795726e-18,
                        -4.01282631e-18,
                        3.49879417e-18,
                    ],
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                ],
                [
                    [
                        3.22671619e-17,
                        -4.28062849e-18,
                        2.03758062e-17,
                        -6.73005356e-19,
                        4.70692928e-18,
                        -6.76702152e-18,
                    ],
                    [
                        -2.82117907e-17,
                        -2.33310517e-17,
                        6.11832626e-18,
                        5.80471685e-18,
                        2.92245962e-18,
                        1.79105471e-18,
                    ],
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                ],
            ]
        ),
    ]

    expected_coeffs_y_arr = [
        np.array(
            [
                [-5.71594742e-12, 1.57896569e-12, 7.77547371e-14, -1.64732892e-14],
                [2.54115137e-02, 7.29476925e-04, -3.66530601e-04, 1.09408770e-05],
                [-2.54115164e-02, -7.29476927e-04, 3.66530612e-04, -1.09408790e-05],
            ]
        ),
        np.array(
            [
                [
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                ],
                [
                    [
                        -7.07234845e-03,
                        4.04421862e-04,
                        -2.39537033e-04,
                        5.09761340e-05,
                        1.42021248e-05,
                        5.21565396e-05,
                    ],
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                ],
                [
                    [
                        7.07234920e-03,
                        -4.04421869e-04,
                        2.39537053e-04,
                        -5.09761379e-05,
                        -1.42021254e-05,
                        -5.21565454e-05,
                    ],
                    [
                        -2.32180210e-11,
                        -1.11992540e-04,
                        1.11992632e-04,
                        2.04538186e-05,
                        6.00175989e-12,
                        -2.04538352e-05,
                    ],
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                ],
            ]
        ),
    ]

    expected_coeffs_z_arr = [
        np.array(
            [
                [-3.44349847e-02, 2.92644047e-03, 1.04384684e-03, -1.13295425e-04],
                [2.56006019e-02, 5.19670502e-04, -2.97428252e-04, 6.25382340e-06],
                [2.56005992e-02, 5.19670426e-04, -2.97428239e-04, 6.25382238e-06],
            ]
        ),
        np.array(
            [
                [
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                ],
                [
                    [
                        5.72749723e-03,
                        2.41938005e-04,
                        -7.70656829e-05,
                        -2.45454012e-05,
                        -4.27840654e-05,
                        -2.71261299e-04,
                    ],
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                ],
                [
                    [
                        5.72749659e-03,
                        2.41937964e-04,
                        -7.70656598e-05,
                        -2.45453921e-05,
                        -4.27840688e-05,
                        -2.71261267e-04,
                    ],
                    [
                        7.13133100e-04,
                        -1.01350633e-04,
                        -1.01350575e-04,
                        7.71647159e-06,
                        -9.06113606e-06,
                        7.71646583e-06,
                    ],
                    [
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                        0.00000000e00,
                    ],
                ],
            ]
        ),
    ]
    coeffs_x_arr, coeffs_y_arr, coeffs_z_arr = taylor_dipole_coeffs(test_pes_object, 4, 1)
    assert np.allclose(coeffs_x_arr[0], expected_coeffs_x_arr[0], atol=1e-10)
    assert np.allclose(coeffs_x_arr[1], expected_coeffs_x_arr[1], atol=1e-10)
    assert np.allclose(abs(coeffs_y_arr[0]), abs(expected_coeffs_y_arr[0]), atol=1e-10)
    assert np.allclose(abs(coeffs_y_arr[1]), abs(expected_coeffs_y_arr[1]), atol=1e-8)
    assert np.allclose(abs(coeffs_z_arr[0]), abs(expected_coeffs_z_arr[0]), atol=1e-8)
    assert np.allclose(abs(coeffs_z_arr[1]), abs(expected_coeffs_z_arr[1]), atol=1e-8)

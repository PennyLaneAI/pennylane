# Copyright 2018-2024 Xanadu Quantum Technologies Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Unit Tests for the taylor hamiltonian construction functions."""

import numpy as np

from pennylane.labs.vibrational_ham.bosonic import (
    BoseWord,
    BoseSentence,
)
from pennylane.labs.vibrational_ham.taylor_ham import (
    taylor_anharmonic,
    taylor_bosonic,
    taylor_hamiltonian,
    taylor_harmonic,
    taylor_kinetic,
)

# Reference from Stepan and Ignacio's code, for H2S
taylor_1D = np.array(
    [
        [1.01030577e-05, -4.47405417e-05, -1.10879929e-05],
        [-7.12792255e-05, -1.38984154e-03, 1.84471155e-04],
        [-7.12793370e-05, -1.38984152e-03, 1.84471151e-04],
    ]
)

taylor_2D = np.array(
    [
        [
            [
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
            ],
            [
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
            ],
            [
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
            ],
        ],
        [
            [
                -5.31504581e-05,
                1.26195669e-04,
                4.59577981e-04,
                -3.19150467e-05,
                -2.12745957e-04,
                2.58007346e-05,
            ],
            [
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
            ],
            [
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
            ],
        ],
        [
            [
                -5.31505500e-05,
                1.26195707e-04,
                4.59577965e-04,
                -3.19150532e-05,
                -2.12745955e-04,
                2.58007383e-05,
            ],
            [
                -1.27269515e-04,
                1.13495645e-05,
                1.13497539e-05,
                -1.88516283e-06,
                1.92460286e-06,
                -1.88519488e-06,
            ],
            [
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
                0.00000000e00,
            ],
        ],
    ]
)

freqs = [0.00589689, 0.01232428, 0.01232428]

Uloc = [
    [1.0, 0.0, 0.0],
    [0.0, -0.70710712, -0.70710644],
    [0.0, -0.70710644, 0.70710712],
]

# Pre-sorted
reference_taylor_bosonic_coeffs = np.array(
    [
        -0.0014741495669876705,
        -0.0014741495669876705,
        -0.0014741495436878212,
        -0.0014741495436878212,
        -0.0013076515364979621,
        -0.0013076515364979621,
        -0.00130765145178359,
        -0.00130765145178359,
        -0.0004913831889958902,
        -0.0004913831889958902,
        -0.0004913831812292737,
        -0.0004913831812292737,
        -0.00021274595723421176,
        -0.00021274595487619645,
        (-0.00011795343850034418 + 0j),
        (-0.00011795343850034418 + 0j),
        -0.00010637297861710588,
        -0.00010637297861710588,
        -0.00010637297861710588,
        -0.00010637297861710588,
        -0.00010637297743809822,
        -0.00010637297743809822,
        -0.00010637297743809822,
        -0.00010637297743809822,
        -6.646252603025534e-05,
        -6.646252603025534e-05,
        -6.646252603025534e-05,
        -6.646252603025534e-05,
        -5.318648930855294e-05,
        -5.318648930855294e-05,
        -5.318648930855294e-05,
        -5.318648930855294e-05,
        -5.318648871904911e-05,
        -5.318648871904911e-05,
        -5.318648871904911e-05,
        -5.318648871904911e-05,
        -4.745451061101081e-05,
        -4.745451061101081e-05,
        -3.1161011194140255e-05,
        -3.1161011194140255e-05,
        -3.1161011194140255e-05,
        -3.1161011194140255e-05,
        -3.116096311120378e-05,
        -3.116096311120378e-05,
        -3.116096311120378e-05,
        -3.116096311120378e-05,
        -2.3936289911948183e-05,
        -2.3936289911948183e-05,
        -2.3936289911948183e-05,
        -2.3936289911948183e-05,
        -2.393628503037501e-05,
        -2.393628503037501e-05,
        -2.393628503037501e-05,
        -2.393628503037501e-05,
        -1.663198932563437e-05,
        -1.581817020367027e-05,
        -1.581817020367027e-05,
        -1.1087992883756245e-05,
        -1.1087992883756245e-05,
        -7.978763303982728e-06,
        -7.978763303982728e-06,
        -7.978763303982728e-06,
        -7.978763303982728e-06,
        -7.97876167679167e-06,
        -7.97876167679167e-06,
        -7.97876167679167e-06,
        -7.97876167679167e-06,
        -2.771998220939061e-06,
        -2.771998220939061e-06,
        -1.4138961572840636e-06,
        -1.4138961572840636e-06,
        -1.4138961572840636e-06,
        -1.4138961572840636e-06,
        -1.4138721238216464e-06,
        -1.4138721238216464e-06,
        -1.4138721238216464e-06,
        -1.4138721238216464e-06,
        -4.7129871909468786e-07,
        -4.7129871909468786e-07,
        -4.7129871909468786e-07,
        -4.7129871909468786e-07,
        -4.712907079405488e-07,
        -4.712907079405488e-07,
        -4.712907079405488e-07,
        -4.712907079405488e-07,
        4.811507148005317e-07,
        4.811507148005317e-07,
        4.811507148005317e-07,
        4.811507148005317e-07,
        9.623014296010633e-07,
        9.623014296010633e-07,
        9.623014296010633e-07,
        9.623014296010633e-07,
        1.9246028592021267e-06,
        4.012677014466219e-06,
        4.012677014466219e-06,
        4.012677014466219e-06,
        4.012677014466219e-06,
        4.012743974048166e-06,
        4.012743974048166e-06,
        4.012743974048166e-06,
        4.012743974048166e-06,
        6.450183658722912e-06,
        6.450183658722912e-06,
        6.450183658722912e-06,
        6.450183658722912e-06,
        6.450184566334329e-06,
        6.450184566334329e-06,
        6.450184566334329e-06,
        6.450184566334329e-06,
        8.025354028932438e-06,
        8.025354028932438e-06,
        8.025487948096332e-06,
        8.025487948096332e-06,
        1.9350550976168735e-05,
        1.9350550976168735e-05,
        1.9350550976168735e-05,
        1.9350550976168735e-05,
        1.9350553699002985e-05,
        1.9350553699002985e-05,
        1.9350553699002985e-05,
        1.9350553699002985e-05,
        4.1779316146677584e-05,
        4.1779316146677584e-05,
        4.461690659578001e-05,
        4.461690659578001e-05,
        4.461690659578001e-05,
        4.461690659578001e-05,
        4.461692016190839e-05,
        4.461692016190839e-05,
        4.461692016190839e-05,
        4.461692016190839e-05,
        4.611778769584726e-05,
        4.611778769584726e-05,
        4.611778866220354e-05,
        4.611778866220354e-05,
        8.923381319156002e-05,
        8.923381319156002e-05,
        8.923384032381677e-05,
        8.923384032381677e-05,
        0.00016248534793018287,
        0.00016248534793018287,
        0.00016248534793018287,
        0.00016248534793018287,
        0.0001624853534752421,
        0.0001624853534752421,
        0.0001624853534752421,
        0.0001624853534752421,
        0.00018447115078338905,
        0.00018447115078338905,
        0.00018447115464881417,
        0.00018447115464881417,
        (0.00018836171968557433 + 0j),
        (0.00018836171968557433 + 0j),
        (0.0001883617806066767 + 0j),
        (0.0001883617806066767 + 0j),
        0.0002767067261750836,
        0.0002767067319732213,
        0.00032497069586036575,
        0.00032497069586036575,
        0.0003249707069504842,
        0.0003249707069504842,
        (0.0056609811549201625 + 0j),
        (0.012701001932649118 + 0j),
        (0.012701001935554193 + 0j),
        (0.015368993604463204 + 0j),
    ]
)

# Pre-sorted, with operators rearranged with indices in descending order
reference_taylor_bosonic_ops = [
    {(0, 1): "+", (1, 1): "+", (2, 1): "-"},
    {(0, 1): "+", (1, 1): "-", (2, 1): "-"},
    {(0, 2): "+", (1, 2): "+", (2, 2): "-"},
    {(0, 2): "+", (1, 2): "-", (2, 2): "-"},
    {(0, 1): "+"},
    {(0, 1): "-"},
    {(0, 2): "+"},
    {(0, 2): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "+"},
    {(0, 1): "-", (1, 1): "-", (2, 1): "-"},
    {(0, 2): "+", (1, 2): "+", (2, 2): "+"},
    {(0, 2): "-", (1, 2): "-", (2, 2): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 0): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 0): "-", (3, 2): "-"},
    {(0, 0): "+", (1, 0): "+"},
    {(0, 0): "-", (1, 0): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 1): "+", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 1): "+", (3, 1): "-"},
    {(0, 1): "+", (1, 0): "-", (2, 0): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 2): "+", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 2): "+", (3, 2): "-"},
    {(0, 2): "+", (1, 0): "-", (2, 0): "-", (3, 2): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+"},
    {(0, 2): "+", (1, 1): "-"},
    {(0, 1): "+", (1, 2): "-"},
    {(0, 1): "-", (1, 2): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 1): "+", (3, 1): "+"},
    {(0, 1): "+", (1, 1): "+", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "-", (1, 0): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 2): "+", (3, 2): "+"},
    {(0, 2): "+", (1, 2): "+", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 2): "-", (3, 2): "-"},
    {(0, 0): "-", (1, 0): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 0): "-"},
    {(0, 0): "+", (1, 2): "+"},
    {(0, 2): "+", (1, 0): "-"},
    {(0, 0): "+", (1, 2): "-"},
    {(0, 0): "-", (1, 2): "-"},
    {(0, 0): "+", (1, 1): "+"},
    {(0, 1): "+", (1, 0): "-"},
    {(0, 0): "+", (1, 1): "-"},
    {(0, 0): "-", (1, 1): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 2): "+", (3, 2): "-"},
    {(0, 2): "+", (1, 2): "+", (2, 0): "-", (3, 2): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 2): "-", (3, 2): "-"},
    {(0, 2): "+", (1, 0): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 1): "+", (3, 1): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 0): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 1): "-", (3, 1): "-"},
    {(0, 1): "+", (1, 0): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "+"},
    {(0, 0): "-", (1, 0): "-", (2, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 2): "+", (3, 2): "+"},
    {(0, 2): "+", (1, 2): "+", (2, 2): "+", (3, 0): "-"},
    {(0, 0): "+", (1, 2): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 0): "-", (1, 2): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 1): "+", (3, 1): "+"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "+", (3, 0): "-"},
    {(0, 0): "+", (1, 1): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "-", (1, 1): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 0): "+"},
    {(0, 0): "-", (1, 0): "-", (2, 0): "-", (3, 0): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 2): "+", (3, 1): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 1): "-", (3, 1): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 1): "-", (2, 1): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 2): "+", (3, 2): "-"},
    {(0, 2): "+", (1, 2): "+", (2, 1): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 2): "-", (3, 2): "-"},
    {(0, 2): "+", (1, 1): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "+", (3, 2): "+"},
    {(0, 2): "+", (1, 1): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "+", (3, 2): "-"},
    {(0, 1): "-", (1, 1): "-", (2, 1): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 2): "+", (3, 2): "+"},
    {(0, 2): "+", (1, 2): "+", (2, 2): "+", (3, 1): "-"},
    {(0, 1): "+", (1, 2): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "-", (1, 2): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 2): "+", (3, 2): "+"},
    {(0, 2): "+", (1, 2): "+", (2, 1): "-", (3, 1): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "-", (1, 1): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 2): "+", (3, 1): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 2): "+", (3, 2): "-"},
    {(0, 2): "+", (1, 1): "-", (2, 1): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 1): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 1): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 2): "+"},
    {(0, 2): "+", (1, 2): "+", (2, 1): "-"},
    {(0, 1): "+", (1, 2): "-", (2, 2): "-"},
    {(0, 1): "-", (1, 2): "-", (2, 2): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 2): "+"},
    {(0, 2): "+", (1, 1): "-", (2, 1): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 2): "-"},
    {(0, 1): "-", (1, 1): "-", (2, 2): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 1): "+"},
    {(0, 1): "+", (1, 0): "-", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 1): "-"},
    {(0, 0): "-", (1, 0): "-", (2, 0): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 2): "+"},
    {(0, 2): "+", (1, 0): "-", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "+", (3, 2): "-"},
    {(0, 0): "-", (1, 0): "-", (2, 0): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 2): "-"},
    {(0, 2): "+", (1, 1): "-", (2, 2): "-"},
    {(0, 1): "+", (1, 2): "+", (2, 1): "-"},
    {(0, 1): "+", (1, 1): "-", (2, 2): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 1): "+", (3, 0): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 0): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 2): "+", (3, 0): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 0): "-", (3, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 0): "-", (3, 2): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 0): "-", (3, 2): "-"},
    {(0, 0): "+"},
    {(0, 0): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 1): "+"},
    {(0, 1): "+", (1, 1): "+", (2, 0): "-"},
    {(0, 0): "+", (1, 1): "-", (2, 1): "-"},
    {(0, 0): "-", (1, 1): "-", (2, 1): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 2): "+"},
    {(0, 2): "+", (1, 2): "+", (2, 0): "-"},
    {(0, 0): "+", (1, 2): "-", (2, 2): "-"},
    {(0, 0): "-", (1, 2): "-", (2, 2): "-"},
    {(0, 2): "+", (1, 2): "+", (2, 2): "+", (3, 2): "+"},
    {(0, 2): "-", (1, 2): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "+", (3, 1): "+"},
    {(0, 1): "-", (1, 1): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 1): "-"},
    {(0, 1): "+", (1, 0): "-", (2, 1): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 2): "-"},
    {(0, 2): "+", (1, 0): "-", (2, 2): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 2): "+"},
    {(0, 2): "+", (1, 0): "-", (2, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 2): "-"},
    {(0, 0): "-", (1, 0): "-", (2, 2): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 1): "+"},
    {(0, 1): "+", (1, 0): "-", (2, 0): "-"},
    {(0, 0): "+", (1, 0): "+", (2, 1): "-"},
    {(0, 0): "-", (1, 0): "-", (2, 1): "-"},
    {(0, 2): "+", (1, 2): "+", (2, 2): "+", (3, 2): "-"},
    {(0, 2): "+", (1, 2): "-", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "+", (3, 1): "-"},
    {(0, 1): "+", (1, 1): "-", (2, 1): "-", (3, 1): "-"},
    {(0, 2): "+", (1, 2): "+"},
    {(0, 2): "-", (1, 2): "-"},
    {(0, 1): "+", (1, 1): "+"},
    {(0, 1): "-", (1, 1): "-"},
    {(0, 2): "+", (1, 2): "+", (2, 2): "-", (3, 2): "-"},
    {(0, 1): "+", (1, 1): "+", (2, 1): "-", (3, 1): "-"},
    {(0, 0): "+", (1, 2): "+", (2, 0): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 2): "-"},
    {(0, 0): "+", (1, 1): "+", (2, 0): "-"},
    {(0, 0): "+", (1, 0): "-", (2, 1): "-"},
    {(0, 0): "+", (1, 0): "-"},
    {(0, 2): "+", (1, 2): "-"},
    {(0, 1): "+", (1, 1): "-"},
    {},
]


for i, ele in enumerate(reference_taylor_bosonic_ops):
    reference_taylor_bosonic_ops[i] = BoseWord(ele)


def test_taylor_anharmonic():
    # anh_ham = taylor_anharmonic([taylor_1D, taylor_2D])
    pass


def test_taylor_harmonic():
    taylor_ham = taylor_harmonic([taylor_1D, taylor_2D], freqs)
    pass


def test_taylor_kinetic():
    taylor_kin = taylor_kinetic([taylor_1D, taylor_2D], freqs, Uloc=Uloc)
    pass


def test_taylor_bosonic():
    taylor_bos = taylor_bosonic([taylor_1D, taylor_2D], freqs, Uloc=Uloc)
    taylor_bos.simplify()
    sorted_ops_arr = [ele[0] for ele in sorted(taylor_bos.items(), key=lambda x: x[1].real)]
    sorted_coeffs_arr = [ele[1] for ele in sorted(taylor_bos.items(), key=lambda x: x[1].real)]

    assert reference_taylor_bosonic_ops == sorted_ops_arr
    assert np.allclose(sorted_coeffs_arr, reference_taylor_bosonic_coeffs, atol=1e-3)


def test_taylor_hamiltonian():
    # taylor_ham =  taylor_hamiltonian()
    pass

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# PennyLane documentation build configuration file, created by
# sphinx-quickstart on Tue Apr 17 11:43:51 2018.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.
from __future__ import annotations

import os
import re
import sys
import inspect
from datetime import datetime

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath(".."))
sys.path.insert(0, os.path.abspath("_ext"))
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(".")), "doc"))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
needs_sphinx = "8.1"

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named "sphinx.ext.*") or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.mathjax",
    "sphinx.ext.napoleon",
    "sphinx.ext.inheritance_diagram",
    "sphinx.ext.viewcode",
    "sphinxcontrib.bibtex",
    "sphinx.ext.graphviz",
    "sphinx.ext.intersphinx",
    "sphinx_automodapi.automodapi",
    "sphinx_copybutton",
    "sphinxext.opengraph",
    "m2r2",
    "sphinx_automodapi.smart_resolver"
]

# Open Graph metadata
ogp_social_cards = {
    "image": "_static/logo.png",
    "enable": True,
    "site_url": "https://docs.pennylane.ai/",
    "line_color": "#03b2ff",
}
ogp_image = "_static/opengraph.png"
numpydoc_show_class_members = False

# The base URL with a proper language and version.
html_baseurl = os.environ.get("READTHEDOCS_CANONICAL_URL", "/")

# Tell Jinja2 templates the build is running on Read the Docs
if os.environ.get("READTHEDOCS", "") == "True":
    html_context = {"READTHEDOCS": True}

os.environ["SPHINX_BUILD"] = "1"

autosummary_generate = True
autosummary_imported_members = False
automodapi_toctreedirnm = "code/api"
automodapi_inheritance_diagram = False
automodsumm_inherited_members = True

# Hot fix for the error: 'You must configure the bibtex_bibfiles setting'
bibtex_bibfiles = ["bibfile.bib"]

copybutton_prompt_text = r">>> |\.\.\. |\$ |In \[\d*\]: | {2,5}\.\.\.: | {5,8}: "
copybutton_prompt_is_regexp = True

intersphinx_mapping = {
    "demo": ("https://pennylane.ai/qml", None),
    "catalyst": ("https://docs.pennylane.ai/projects/catalyst/en/stable", None),
}

mathjax_path = (
    "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML"
)
ignore_warnings = [("code/api/qml_transforms*", "no module named pennylane.transforms")]
autodoc_mock_imports = ["torch"]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "PennyLane"
copyright = f"{datetime.now().year}, Xanadu Quantum Technologies"
author = "Xanadu Inc."

add_module_names = False
autodoc_type_aliases = {
    'H': 'pennylane.ops.qubit.non_parametric_ops.H',
    'I': 'pennylane.ops.identity.I',
    'X': 'pennylane.ops.qubit.non_parametric_ops.X',
    'Y': 'pennylane.ops.qubit.non_parametric_ops.Y',
    'Z': 'pennylane.ops.qubit.non_parametric_ops.Z',
}

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.

import pennylane

pennylane.Hamiltonian = pennylane.ops.op_math.linear_combination.LinearCombination


# The full version, including alpha/beta/rc tags.
release = pennylane.__version__

# The short X.Y version.
version = re.match(r"^(\d+\.\d+)", release).expand(r"\1")

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# today_fmt is used as the format for a strftime call.
today_fmt = "%Y-%m-%d"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
show_authors = True

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------


# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
# html_theme = "nature"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
# html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
# html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
# html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
# html_logo = None

# The name of an image file (relative to this directory) to use as a favicon of
# the docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
# html_favicon = "_static/favicon.ico"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
html_extra_path = ["robots.txt"]

# If not "", a "Last updated on:" timestamp is inserted at every page bottom,
# using the given strftime format.
# html_last_updated_fmt = "%b %d, %Y"

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
# html_sidebars = {
#     "**": [
#     ]
# }

# Additional templates that should be rendered to pages, maps page names to
# template names.
# html_additional_pages = {}

# If false, no module index is generated.
# html_domain_indices = True

# If false, no index is generated.
# html_use_index = True

# If true, the index is split into individual pages for each letter.
# html_split_index = False

# If true, links to the reST sources are added to the pages.
# html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
# html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
# html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
# html_use_opensearch = ""

# This is the file name suffix for HTML files (e.g., ".xhtml").
# html_file_suffix = None

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   "da", "de", "en", "es", "fi", "fr", "h", "it", "ja"
#   "nl", "no", "pt", "ro", "r", "sv", "tr"
# html_search_language = "en"

# A dictionary with options for the search language support, empty by default.
# Now only "ja" uses this config value
# html_search_options = {"type": "default"}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
# html_search_scorer = "scorer.js"

# Output file base name for HTML help builder.
htmlhelp_basename = "PennyLanedoc"

# -- Xanadu theme ---------------------------------------------------------
html_theme = "pennylane"

# Xanadu theme options (see theme.conf for more information).
html_theme_options = {
    "extra_copyrights": [
        "TensorFlow, the TensorFlow logo, and any related marks are trademarks " "of Google Inc."
    ],
    "google_analytics_tracking_id": "G-C480Z9JL0D",
    "search_on_pennylane_ai": True,
}

edit_on_github_project = "PennyLaneAI/pennylane"
edit_on_github_branch = "master/doc"

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ("letterpaper" or "a4paper").
    #
    # "papersize": "letterpaper",
    # The font size ("10pt", "11pt" or "12pt").
    #
    # "pointsize": "10pt",
    # Additional stuff for the LaTeX preamble.
    #
    # "preamble": "",
    # Latex figure (float) alignment
    #
    # "figure_align": "htbp",
}

latex_additional_files = ["macros.tex"]

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, "PennyLane.tex", "PennyLane Documentation", "Xanadu Inc.", "manual"),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "pennylane", "PennyLane Documentation", [author], 1)]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "PennyLane",
        "PennyLane Documentation",
        author,
        "PennyLane",
        "Xanadu quantum machine learning library.",
        "Miscellaneous",
    ),
]


# ============================================================

# the order in which autodoc lists the documented members
autodoc_member_order = "bysource"

# remove types from function signatures
autodoc_typehints = "none"

# inheritance_diagram graphviz attributes
inheritance_node_attrs = dict(color="lightskyblue1", style="filled")

# autodoc_type_aliases = {
#     'H': 'H',
#     'I': 'pennylane.ops.identity.I',
#     'X': 'pennylane.ops.qubit.non_parametric_ops.X',
#     'Y': 'pennylane.ops.qubit.non_parametric_ops.Y',
#     # 'Z': 'pennylane.ops.qubit.non_parametric_ops.Z',
# }

# def setup(app):
#     import pennylane
#     from typing import TypeAlias
#     # import shutil
#     # need to assign the names here, otherwise autodoc won't document these classes,
#     # and will instead just say 'alias of ...'
#     # pennylane.H.__name__ = 'H'
#     # pennylane.Hadamard.__name__ = 'Hadamard'
#     pennylane.X.__name__ = 'X'
#     # pennylane.Y.__name__ = 'Y'
#     # pennylane.H.__module__ = __name__
#     # pennylane.FromBloq.__name__ = 'FromBloq'
#     # pennylane.H.__doc__ = pennylane.Hadamard.__doc__
#     pennylane.Z.__doc__ = "The Pauli Z operator"
#     # pennylane.PauliY.__name__ = 'PauliY'
#     # pennylane.H.__doc__ = pennylane.H.__doc__
#     # pennylane.GPUTreeExplainer.__name__ = 'GPUTreeExplainer'
#     pennylane.FromBloq.__doc__ = """An adapter for using a `Qualtran Bloq <https://qualtran.readthedocs.io/en/latest/bloqs/index.html#bloqs-library>`_
#             as a PennyLane :class:`~.Operation`.

#             .. note::
#                 This class requires the latest version of Qualtran. We recommend installing the main
#                 branch via ``pip``:

#                 .. code-block:: console

#                     pip install qualtran

#             Args:
#                 bloq (qualtran.Bloq): an initialized Qualtran ``Bloq`` to be wrapped as a PennyLane operator
#                 wires (WiresLike): The wires the operator acts on. The number of wires can be determined by using the
#                     signature of the ``Bloq`` using ``bloq.signature.n_qubits()``.

#             Raises:
#                 TypeError: bloq must be an instance of ``Bloq``.

#             **Example**

#             This example shows how to use ``qml.FromBloq``:

#             >>> from qualtran.bloqs.basic_gates import CNOT
#             >>> qualtran_cnot = qml.FromBloq(CNOT(), wires=[0, 1])
#             >>> qualtran_cnot.matrix()
#             array([[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
#             [0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j],
#             [0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j],
#             [0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j]])

#             This example shows how to use ``qml.FromBloq`` inside a device:

#             >>> from qualtran.bloqs.basic_gates import CNOT
#             >>> dev = qml.device("default.qubit") # Execute on device
#             >>> @qml.qnode(dev)
#             ... def circuit():
#             ...     qml.FromBloq(CNOT(), wires=[0, 1])
#             ...     return qml.state()
#             >>> circuit()
#             array([1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j])

#             .. details::
#                 :title: Advanced Example

#                 This example shows how to use ``qml.FromBloq`` to implement a textbook Quantum Phase Estimation Bloq inside a device:

#                 .. code-block::

#                     from qualtran.bloqs.phase_estimation import RectangularWindowState, TextbookQPE
#                     from qualtran.bloqs.chemistry.trotter.ising import IsingXUnitary, IsingZZUnitary
#                     from qualtran.bloqs.chemistry.trotter.trotterized_unitary import TrotterizedUnitary

#                     # Parameters for the TrotterizedUnitary
#                     nsites = 5
#                     j_zz, gamma_x = 2, 0.1
#                     zz_bloq = IsingZZUnitary(nsites=nsites, angle=0.02 * j_zz)
#                     x_bloq = IsingXUnitary(nsites=nsites, angle=0.01 * gamma_x)
#                     trott_unitary = TrotterizedUnitary(
#                         bloqs=(x_bloq, zz_bloq),  timestep=0.01,
#                         indices=(0, 1, 0), coeffs=(0.5 * gamma_x, j_zz, 0.5 * gamma_x)
#                     )

#                     # Instantiate the TextbookQPE and pass in the unitary
#                     textbook_qpe = TextbookQPE(trott_unitary, RectangularWindowState(3))

#                     # Execute on device
#                     dev = qml.device("default.qubit")
#                     @qml.qnode(dev)
#                     def circuit():
#                         qml.FromBloq(textbook_qpe, wires=range(textbook_qpe.signature.n_qubits()))
#                         return qml.probs(wires=[5, 6, 7])

#                     circuit()

#             .. details::
#                 :title: Usage Details

#                 The decomposition of a ``Bloq`` wrapped in ``qml.FromBloq`` may use more wires than expected.
#                 For example, when we wrap Qualtran's ``CZPowGate``, we get

#                 >>> from qualtran.bloqs.basic_gates import CZPowGate
#                 >>> qml.FromBloq(CZPowGate(0.468, eps=1e-11), wires=[0, 1]).decomposition()
#                 [FromBloq(And, wires=Wires([0, 1, 'alloc_free_2'])),
#                 FromBloq(Z**0.468, wires=Wires(['alloc_free_2'])),
#                 FromBloq(And†, wires=Wires([0, 1, 'alloc_free_2']))]

#                 This behaviour results from the decomposition of ``CZPowGate`` as defined in Qualtran,
#                 which allocates and frees a wire in the same ``bloq``. In this situation,
#                 PennyLane automatically allocates this wire under the hood, and that additional wire is
#                 named ``alloc_free_{idx}``. The indexing starts at the length of the wires defined in the
#                 signature, which in the case of ``CZPowGate`` is :math:`2`. Due to the current
#                 limitations of PennyLane, these wires cannot be accessed manually or mapped.
#             """
#     # app.connect('build-finished', build_finished)

#     # def build_finished(app, exception):
#     #     shutil.rmtree(NOTEBOOKS_DIR)

# Store original docstrings and names if they are likely to be aliased and modified
_original_hadamard_doc = None
_original_hadamard_name = None

def autodoc_alias_fix_handler(app, what, name, obj, options, lines):
    """
    Autodoc event handler to fix docstrings and names for specific aliases.
    """
    global _original_hadamard_doc, _original_hadamard_name

    try:
        import pennylane # Import inside to ensure it's loaded by Sphinx
    except ImportError:
        app.warn("Could not import 'pennylane' in conf.py autodoc handler.")
        return lines

    # --- Handle Hadamard's original state and its docstring ---
    if what == 'class' and name == 'pennylane.Hadamard':
        # Store original values if not already stored
        if _original_hadamard_doc is None:
            _original_hadamard_doc = inspect.getdoc(obj)
        if _original_hadamard_name is None:
            _original_hadamard_name = obj.__name__

        # Always ensure Hadamard's docstring is its own original, not an alias message
        # And its name is correct
        if inspect.getdoc(obj) != _original_hadamard_doc:
             # This is a bit tricky, setting __doc__ might trigger a re-read
             # of the current 'lines'. This part might need further tweaking
             # if the 'lines' passed in are already corrupted by the alias.
             obj.__doc__ = _original_hadamard_doc # Force it back
             lines[:] = original_docstring.splitlines() # Replace lines too if needed

        if obj.__name__ != _original_hadamard_name:
            obj.__name__ = _original_hadamard_name # Force name back

    # --- Handle 'H' alias ---
    elif what == 'class' and name == 'pennylane.H':
        # Check if 'H' is truly an alias of 'Hadamard'
        if obj is pennylane.Hadamard:
            # First, set the desired docstring for 'H'
            # (using your preferred content)
            new_h_docstring = (
                r"H(wires)\n"
                r"The Hadamard operator\n\n"
                r".. math:: H = \frac{1}{\sqrt{2}}\begin{bmatrix} 1 & 1\\ 1 & -1\end{bmatrix}.\n\n"
                r".. seealso:: The equivalent long-form alias :class:`~Hadamard`\n\n"
                r"**Details:**\n\n"
                r"* Number of wires: 1\n"
                r"* Number of parameters: 0\n\n"
                r"Args:\n"
                r"    wires (Sequence[int] or int): the wire the operation acts on"
            )
            # Replace the lines provided by autodoc with our custom docstring
            lines[:] = new_h_docstring.splitlines()

            # Now, for the name. This is the trickiest part.
            # We want 'H' to show up as 'H', but without affecting 'Hadamard'.
            # Manipulating __name__ on the shared object is problematic.
            # A common workaround is to use a special attribute that autodoc *might*
            # pick up for the display name, but this isn't universally guaranteed.
            # Alternatively, we could manipulate the `name` argument, but that's harder.
            # Let's try to set __qualname__ for the alias to be 'H' to override the default.
            # This is a very deep hack.
            if hasattr(obj, '__qualname__'):
                 # Store original qualname if not already stored
                if not hasattr(obj, '_original_qualname_hadamard'):
                    obj._original_qualname_hadamard = obj.__qualname__
                obj.__qualname__ = 'pennylane.H' # Force qualname for display

    # --- Handle other specific aliases if needed ---
    # Example for 'X'
    elif what == 'class' and name == 'pennylane.X' and obj is pennylane.ops.qubit.non_parametric_ops.X:
        # If X is an alias and its __name__ was set on the original,
        # you need to be careful. The best is to explicitly set its docstring
        # if it's showing "alias of".
        # For X, if you're doing pennylane.X.__name__ = 'X', this means
        # pennylane.ops.qubit.non_parametric_ops.X also has its __name__ changed.
        # This is the same problem as Hadamard.
        # So, you'd need similar logic to above:
        # store original for non_parametric_ops.X and restore it if needed.
        # Then, provide a specific docstring for pennylane.X.
        pass # Placeholder for similar logic if needed for X

    # Ensure Z's specific docstring is applied without affecting original PauliZ
    elif what == 'class' and name == 'pennylane.Z' and obj is pennylane.ops.qubit.non_parametric_ops.Z:
        new_z_docstring = "The Pauli Z operator"
        lines[:] = new_z_docstring.splitlines()
        # Similar to H, if you have Z=PauliZ, setting its docstring will affect PauliZ
        # So you need to be careful if PauliZ also needs its own full docstring.

    return lines

def setup(app):
    app.connect('autodoc-process-docstring', autodoc_alias_fix_handler)

    # Note: autodoc_type_aliases is for type hints, not for the main docstring content.
    # Keep it if you need it for type hint display, but don't rely on it for documentation content.
    app.config.autodoc_type_aliases = {
        'H': 'H', # This will make type hints like `arg: H` display as `H`
        'I': 'pennylane.ops.identity.I',
        'X': 'pennylane.ops.qubit.non_parametric_ops.X',
        'Y': 'pennylane.ops.qubit.non_parametric_ops.Y',
        # 'Z': 'pennylane.ops.qubit.non_parametric_ops.Z',
    }

    # Remove the problematic lines from your previous conf.py additions:
    # pennylane.X.__name__ = 'X' # This changes the original object's name
    # pennylane.Z.__doc__ = "The Pauli Z operator" # This changes original object's docstring

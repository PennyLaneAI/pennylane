name: Create PennyLane PR to bump RC versions

on:
  push:
  schedule:
    # Run every weekday at 5:50 EDT (cron is in UTC)
    - cron: "50 9 * * 1-5"
  workflow_dispatch:

jobs:
  release_bump_pr:
    name: Setup the release
    runs-on: ubuntu-24.04
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Checkout PennyLane repo
      uses: actions/checkout@v4

    # Sets up Python environment
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    # Ensure setuptools is up-to-date for pyproject.toml processing
    - name: Install latest setuptools 
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools        

    - name: Check for rc branch
      run: |
        VERSION=$(python setup.py --version)
        IFS=. read MAJ MIN PAT <<< "${VERSION%-dev[0-9]*}"
        RC_BRANCH="sc-98284-rc-test" #"v${MAJ}.$((MIN-1)).${PAT}-rc0"
        if git ls-remote --exit-code origin "refs/heads/$RC_BRANCH"; then
          echo "branch_exists=true" >> $GITHUB_ENV
          echo "rc_branch=$RC_BRANCH" >> $GITHUB_ENV
        else
          echo "branch_exists=false" >> $GITHUB_ENV
        fi

    - name: Checkout PennyLane repo
      if: ${{ env.branch_exists == 'true' }}
      uses: actions/checkout@v4
      with:
        ref: ${{ env.rc_branch }}

    - name: Check for Catalyst and Lightning release
      # if: ${{ env.branch_exists == 'true' }}
      id: check_releases
      run: |
        catalyst_release_date=$(curl -s "https://pypi.org/pypi/pennylane-catalyst/json" | jq -r '.info.version as $v | .releases[$v][0].upload_time_iso_8601' || true)
        lightning_release_date=$(curl -s "https://pypi.org/pypi/pennylane-lightning/json" | jq -r '.info.version as $v | .releases[$v][0].upload_time_iso_8601' || true)
        echo "Latest release was on: ${catalyst_release_date}"
        RELEASE_DATE_SECONDS=$(date -d "${catalyst_release_date}" +%s)
        ONE_WEEK_AGO_SECONDS=$(date -d "7 days ago" +%s)
        if [ "$RELEASE_DATE_SECONDS" -gt "$ONE_WEEK_AGO_SECONDS" ] && [ "$lightning_release_date" -gt "$ONE_WEEK_AGO_SECONDS" ]; then
          echo "Packages were released within the last 7 days."
          echo catalyst_release=true >> $GITHUB_ENV
          echo lightning_release=true >> $GITHUB_ENV
        else
          echo "No, the packages are older than 7 days."
          echo catalyst_release=true >> $GITHUB_ENV
          lightning_release=true >> $GITHUB_ENV
        fi

    - name: Create PR to bump Catalyst and Lightning versions
      # if: ${{ env.catalyst_release == 'true' && env.lightning_release == 'true' }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}    
      run: |
        git checkout -b bump-lightning-catalyst 
        git branch
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"

        lightning_version=$(python -m pip index versions pennylane-lightning 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1 || true)
        catalyst_version=$(python -m pip index versions pennylane-catalyst 2>/dev/null | head -1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' || true)

        echo "catalyst version: ${catalyst_version}"
        echo "lightning version: ${lightning_version}"

        # Extract major and minor version numbers from lightning_version
        lightning_major_minor=$(echo "${lightning_version}" | grep -oE '^[0-9]+\.[0-9]+')

        sed -i -E "s/pennylane-lightning>=[0-9.]*/pennylane-lightning>=${lightning_major_minor}/" "pyproject.toml" # Update pyproject.toml
        sed -i -E "s/PL_CATALYST_MIN_VERSION = Version\(\"[0-9.]*\"\)/PL_CATALYST_MIN_VERSION = Version(\"${catalyst_version}\")/" "pennylane/compiler/compiler.py" 

        echo "Pushing changes and creating PR..."
        git add pyproject.toml pennylane/compiler/compiler.py
        git commit -m "Bump minimum Lightning and Catalyst versions to ${lightning_version} and ${catalyst_version}"
       
        git push origin bump-lightning-catalyst
        gh pr create --label "do not merge :warning:" --base ${{ env.rc_branch }} --title "Bump minimum Lightning and Catalyst versions" --body "Bump minimum Lightning and Catalyst versions"

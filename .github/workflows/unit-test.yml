# This workflow is designed to run unit tests for the PennyLane library on GitHub Actions. 
# It allows for customization of various parameters such as the branch to checkout, 
# the Python version to use, the directory where the tests are located, and additional packages to install. 
# The workflow also includes steps to install dependencies, run the unit tests using PyTest, 
# and upload the coverage file and test durations as artifacts. 
# Additionally, it provides options to freeze the dependencies and upload the frozen requirements 
# file as an artifact.

name: Unit Test
on:
  workflow_call:
    inputs:
      job_name:
        description: The name of the Job as it would appear on GitHub Actions UI
        required: true
        type: string
      branch:
        description: The PennyLane branch to checkout and run unit tests for
        required: true
        type: string
      coverage_artifact_name:
        description: Name of the artifact file that will contain the coverage file for codevoc
        required: true
        type: string
      uv_version:
        description: The version of uv (docs.astral.sh/uv/) to use to install dependencies
        required: false
        type: string
        default: 0.5.5
      job_runner_name:
        description: The name of the runner to use for the job
        required: false
        type: string
        default: 'ubuntu-latest'
      checkout_fetch_depth:
        description: How many commits to checkout from HEAD of branch passed
        required: false
        type: number
        default: 1
      python_version:
        description: The version of Python to use in order to run unit tests
        required: false
        type: string
        default: '3.10'
      pytest_test_directory:
        description: The directory where the PennyLane tests are that should be run by PyTest
        required: false
        type: string
        default: tests
      pytest_coverage_flags:
        description: Coverage flags for PyTest
        required: false
        type: string
        default: ''
      pytest_markers:
        description: Custom mark string to pass to PyTest
        required: false
        type: string
        default: ''
      pytest_additional_args:
        description: Additional arguments to pass to PyTest
        required: false
        type: string
        default: ''
      pytest_durations_file_path:
        description: Path to test durations file
        required: false
        type: string
        default: ''
      additional_pip_packages:
        description: Additional packages to install. Values will be passed to pip install {value}
        required: false
        type: string
        default: ''
      additional_pip_packages_post:
        description: Additional packages to install after pennylane. Values will be passed to pip install {value}
        required: false
        type: string
        default: ''
      requirements_file:
        description: File name to store stable version of requirements for a test group
        required: false
        type: string
        default: ''
      additional_os_packages:
        description: Additional packages to install. Values will be passed to apt-get install {value}
        required: false
        type: string
        default: ''	

env:
  UV_SYSTEM_PYTHON: 1

jobs:
  test:
    name: ${{ inputs.job_name }}
    runs-on: ${{ inputs.job_runner_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: ${{ inputs.checkout_fetch_depth }}
          repository: PennyLaneAI/pennylane
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ inputs.uv_version }}
          enable-cache: true
          cache-dependency-glob: 'requirements-*.txt'
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '${{ inputs.python_version }}'

      - name: Install additional os packages
        if: inputs.additional_os_packages != ''
        env:
          ADDITIONAL_OS_PACKAGES: ${{ inputs.additional_os_packages }}
        run: |
          while IFS= read -r line; do
            if [ ! -z "$line" ]; then
                echo ''
                echo "Now installing -> sudo apt-get install -y $line"
                echo ''
                
                sudo apt-get install -y $line
            fi
          done <<< "$ADDITIONAL_OS_PACKAGES"

      - name: Upgrade PIP and install wheel
        run: uv pip install --upgrade pip wheel
      
      - name: Install PennyLane dependencies
        run: |
          uv pip install -r requirements-ci.txt -r requirements-dev.txt --upgrade

      - name: Install additional PIP packages (Pre-PennyLane)
        shell: bash
        if: inputs.additional_pip_packages != ''
        env:
          ADDITIONAL_PIP_PACKAGES: ${{ inputs.additional_pip_packages }}
        run: |
          while IFS= read -r line; do
            if [ ! -z "$line" ]; then
                echo ''
                echo "Now installing -> uv pip install $line"
                echo ''
                
                uv pip install $line
            fi
          done <<< "$ADDITIONAL_PIP_PACKAGES"

      - name: Install PennyLane
        shell: bash
        run: |
          uv build --wheel  
          uv pip install dist/PennyLane*.whl

      - name: Install additional PIP packages (Post PennyLane Install)
        shell: bash
        if: inputs.additional_pip_packages_post != ''
        env:
          ADDITIONAL_PIP_PACKAGES: ${{ inputs.additional_pip_packages_post }}
        run: |
          while IFS= read -r line; do
            if [ ! -z "$line" ]; then
                echo ''
                echo "Now installing -> uv pip install $line"
                echo ''
                
                uv pip install $line
            fi
          done <<< "$ADDITIONAL_PIP_PACKAGES"

      - name: Set PyTest Args
        id: pytest_args
        env:
          PYTEST_COVERAGE_ARGS: ${{ inputs.pytest_coverage_flags }}
          PYTEST_PARALLELISE_ARGS: -n auto
          PYTEST_ADDITIONAL_ARGS: ${{ inputs.pytest_additional_args }}
          PYTEST_DURATIONS_ARGS: ${{ inputs.pytest_durations_file_path != '' && format('--durations-path="{0}" --store-durations --clean-durations', inputs.pytest_durations_file_path) || '' }}
        run: |
          echo "args=$PYTEST_COVERAGE_ARGS $PYTEST_PARALLELISE_ARGS $PYTEST_ADDITIONAL_ARGS $PYTEST_DURATIONS_ARGS" >> $GITHUB_OUTPUT

      - name: Run PennyLane Unit Tests
        env:
          PYTEST_MARKER: ${{ inputs.pytest_markers != '' && format('-m "{0}"', inputs.pytest_markers) || '' }}
          COV_CORE_DATAFILE: .coverage.eager
          TF_USE_LEGACY_KERAS: "1"  # sets to use tf-keras (Keras2) instead of keras (Keras3) when running TF tests
        # Calling PyTest by invoking Python first as that adds the current directory to sys.path
        run: python -m pytest ${{ inputs.pytest_test_directory }} ${{ steps.pytest_args.outputs.args }} ${{ env.PYTEST_MARKER }}

      - name: Freeze dependencies
        shell: bash
        if: inputs.requirements_file != ''
        run: pip freeze | grep -v "file:///" | sed 's/\(pennylane[-_]lightning==[0-9\.]\+\)\.dev[0-9]\+/\1/gI' > ${{ inputs.requirements_file }}

      - name: Upload frozen requirements
        if: inputs.requirements_file != ''
        uses: actions/upload-artifact@v4
        with:
          name: frozen-${{ inputs.requirements_file }}
          path: ${{ inputs.requirements_file }}

      - name: Upload Durations file as artifact
        if: inputs.pytest_durations_file_path != ''
        uses: actions/upload-artifact@v4
        with:
          name: durations-${{ inputs.job_name }}
          path: ${{ inputs.pytest_durations_file_path }}
          include-hidden-files: true

      - name: Adjust coverage file for Codecov
        run: bash <(sed -i 's/filename=\"/filename=\"pennylane\//g' coverage.xml)

      - name: Upload Coverage File
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.coverage_artifact_name }}
          path: coverage.xml

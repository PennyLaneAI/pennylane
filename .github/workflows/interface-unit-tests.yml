name: Unit Test - All Interfaces
on:
  workflow_call:
    inputs:
      branch:
        description: The PennyLane branch to checkout and run unit tests for
        required: true
        type: string
      jax_version:
        description: The version of JAX to install for any job that requires JAX
        required: false
        type: string
        default: 0.4.10
      tensorflow_version:
        description: The version of TensorFlow to install for any job that requires TensorFlow
        required: false
        type: string
        default: 2.12.0
      pytorch_version:
        description: The version of PyTorch to install for any job that requires PyTorch
        required: false
        type: string
        default: 2.0.0
      pytest_coverage_flags:
        description: PyTest Coverage flags to pass to all jobs
        required: false
        type: string
        default: --cov=pennylane --cov-report=term-missing --cov-report=xml --no-flaky-report -p no:warnings --tb=native

jobs:
  torch-tests:
    strategy:
      matrix:
        python-version:
          - '3.8'
          - '3.11'
    uses: ./.github/workflows/unit-test.yml
    with:
      job_name: torch-tests (${{ matrix.python-version }})
      branch: ${{ inputs.branch }}
      coverage_artifact_name: core-interfaces-coverage-torch-${{ matrix.python-version }}
      python_version: ${{ matrix.python-version }}
      install_jax: false
      install_tensorflow: false
      install_pytorch: true
      pytorch_version: ${{ inputs.pytorch_version }}
      install_pennylane_lightning_master: true
      pytest_coverage_flags: ${{ inputs.pytest_coverage_flags }}
      pytest_markers: torch and not qcut and not legacy and not finite-diff and not param-shift


  autograd-tests:
    strategy:
      matrix:
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
    uses: ./.github/workflows/unit-test.yml
    with:
      job_name: autograd-tests (${{ matrix.python-version }})
      branch: ${{ inputs.branch }}
      coverage_artifact_name: core-interfaces-coverage-autograd-${{ matrix.python-version }}
      python_version: ${{ matrix.python-version }}
      install_jax: false
      install_tensorflow: false
      install_pytorch: false
      install_pennylane_lightning_master: true
      pytest_coverage_flags: ${{ inputs.pytest_coverage_flags }}
      pytest_markers: autograd and not qcut and not legacy and not finite-diff and not param-shift


  tf-tests:
    strategy:
      matrix:
        group:
          - '1'
          - '2'
        python-version:
          - '3.8'
          - '3.10'
    uses: ./.github/workflows/unit-test.yml
    with:
      job_name: tf-tests (${{ matrix.group }}, ${{ matrix.python-version }})
      branch: ${{ inputs.branch }}
      coverage_artifact_name: core-interfaces-coverage-tf-${{ matrix.python-version }}-${{ matrix.group }}
      python_version: ${{ matrix.python-version }}
      install_jax: false
      install_tensorflow: true
      tensorflow_version: ${{ inputs.tensorflow_version }}
      keras_version: ${{ inputs.tensorflow_version }}
      install_pytorch: false
      install_pennylane_lightning_master: true
      pytest_coverage_flags: ${{ inputs.pytest_coverage_flags }}
      pytest_markers: tf and not qcut and not legacy and not finite-diff and not param-shift
      pytest_additional_args: --splits 2 --group ${{ matrix.group }}
      additional_pip_packages: pytest-split


  jax-tests:
    strategy:
      matrix:
        group:
          - '1'
          - '2'
        python-version:
          - '3.8'
          - '3.11'
    uses: ./.github/workflows/unit-test.yml
    with:
      job_name: jax-tests (${{ matrix.group }}, ${{ matrix.python-version }})
      branch: ${{ inputs.branch }}
      coverage_artifact_name: core-interfaces-coverage-jax-${{ matrix.python-version }}-${{ matrix.group }}
      python_version: ${{ matrix.python-version }}
      install_jax: true
      jax_version: ${{ inputs.jax_version }}
      install_tensorflow: false
      install_pytorch: false
      install_pennylane_lightning_master: true
      pytest_coverage_flags: ${{ inputs.pytest_coverage_flags }}
      pytest_markers: jax and not qcut and not legacy and not finite-diff and not param-shift
      pytest_additional_args: --splits 2 --group ${{ matrix.group }}
      additional_pip_packages: pytest-split


  core-tests:
    strategy:
      matrix:
        group:
          - '1'
          - '2'
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
    uses: ./.github/workflows/unit-test.yml
    with:
      job_name: core-tests (${{ matrix.group }}, ${{ matrix.python-version }})
      branch: ${{ inputs.branch }}
      coverage_artifact_name: core-interfaces-coverage-core-${{ matrix.python-version }}-${{ matrix.group }}
      python_version: ${{ matrix.python-version }}
      install_jax: false
      install_tensorflow: false
      install_pytorch: false
      install_pennylane_lightning_master: true
      pytest_coverage_flags: ${{ inputs.pytest_coverage_flags }}
      pytest_markers: core and not qcut and not legacy and not finite-diff and not param-shift
      pytest_additional_args: --splits 2 --group ${{ matrix.group }}
      additional_pip_packages: pytest-split


  all-interfaces-tests:
    uses: ./.github/workflows/unit-test.yml
    with:
      job_name: all-interfaces-tests
      branch: ${{ inputs.branch }}
      coverage_artifact_name: all-interfaces-coverage
      python_version: 3.8
      install_jax: true
      jax_version: ${{ inputs.jax_version }}
      install_tensorflow: true
      tensorflow_version: ${{ inputs.tensorflow_version }}
      keras_version: ${{ inputs.tensorflow_version }}
      install_pytorch: true
      pytorch_version: ${{ inputs.pytorch_version }}
      install_pennylane_lightning_master: false
      pytest_coverage_flags: ${{ inputs.pytest_coverage_flags }}
      pytest_markers: all_interfaces


  zx-tests:
    uses: ./.github/workflows/unit-test.yml
    with:
      job_name: zx-tests
      branch: ${{ inputs.branch }}
      coverage_artifact_name: zx-coverage
      python_version: 3.9
      install_jax: false
      install_tensorflow: false
      install_pytorch: false
      install_pennylane_lightning_master: false
      pytest_coverage_flags: ${{ inputs.pytest_coverage_flags }}
      pytest_markers: zx
      additional_pip_packages: git+https://github.com/Quantomatic/pyzx.git@master


  qcut-tests:
    uses: ./.github/workflows/unit-test.yml
    with:
      job_name: qcut-tests
      branch: ${{ inputs.branch }}
      coverage_artifact_name: qcut-coverage
      python_version: 3.8
      install_jax: true
      jax_version: ${{ inputs.jax_version }}
      install_tensorflow: true
      tensorflow_version: ${{ inputs.tensorflow_version }}
      keras_version: ${{ inputs.tensorflow_version }}
      install_pytorch: true
      pytorch_version: ${{ inputs.pytorch_version }}
      install_pennylane_lightning_master: false
      pytest_coverage_flags: ${{ inputs.pytest_coverage_flags }}
      pytest_markers: qcut
      additional_pip_packages: kahypar==1.1.7 opt_einsum


  qchem-tests:
    uses: ./.github/workflows/unit-test.yml
    with:
      job_name: qchem-tests
      branch: ${{ inputs.branch }}
      coverage_artifact_name: qchem-coverage
      python_version: 3.9
      install_jax: false
      install_tensorflow: false
      install_pytorch: false
      install_pennylane_lightning_master: false
      pytest_coverage_flags: ${{ inputs.pytest_coverage_flags }}
      pytest_markers: qchem
      additional_pip_packages: openfermionpyscf basis-set-exchange


  legacy-tests:
    uses: ./.github/workflows/unit-test.yml
    with:
      job_name: legacy-tests
      branch: ${{ inputs.branch }}
      coverage_artifact_name: legacy-coverage
      python_version: 3.8
      install_jax: true
      jax_version: ${{ inputs.jax_version }}
      install_tensorflow: true
      tensorflow_version: ${{ inputs.tensorflow_version }}
      keras_version: ${{ inputs.tensorflow_version }}
      install_pytorch: true
      pytorch_version: ${{ inputs.pytorch_version }}
      install_pennylane_lightning_master: false
      pytest_coverage_flags: ${{ inputs.pytest_coverage_flags }}
      pytest_markers: legacy


  gradients-tests:
    strategy:
      matrix:
        config:
          - suite: finite-diff
          - suite: param-shift
    uses: ./.github/workflows/unit-test.yml
    with:
      job_name: gradients-tests (${{ matrix.config.suite }})
      branch: ${{ inputs.branch }}
      coverage_artifact_name: gradients-${{ matrix.config.suite }}-coverage
      python_version: 3.8
      install_jax: true
      jax_version: ${{ inputs.jax_version }}
      install_tensorflow: true
      tensorflow_version: ${{ inputs.tensorflow_version }}
      keras_version: ${{ inputs.tensorflow_version }}
      install_pytorch: true
      pytorch_version: ${{ inputs.pytorch_version }}
      install_pennylane_lightning_master: false
      pytest_coverage_flags: ${{ inputs.pytest_coverage_flags }}
      pytest_markers: ${{ matrix.config.suite }}


  data-tests:
    uses: ./.github/workflows/unit-test.yml
    with:
      job_name: data-tests
      branch: ${{ inputs.branch }}
      coverage_artifact_name: data-coverage
      python_version: '3.10'
      install_jax: false
      install_tensorflow: false
      install_pytorch: false
      install_pennylane_lightning_master: false
      pytest_coverage_flags: ${{ inputs.pytest_coverage_flags }}
      pytest_markers: data
      additional_pip_packages: zstd dill


  device-tests:
    strategy:
      matrix:
        config:
          - device: default.qubit
            shots: None
          - device: default.qubit
            shots: 10000
          # - device: default.qubit.tf
          #   shots: None
          - device: default.qubit.autograd
            shots: None
          - device: default.mixed
            shots: None
    uses: ./.github/workflows/unit-test.yml
    with:
      job_name: device-tests (${{ matrix.config.device }}, ${{ matrix.config.shots }})
      branch: ${{ inputs.branch }}
      coverage_artifact_name: devices-coverage-${{ matrix.config.device }}-${{ matrix.config.shots }}
      python_version: 3.8
      install_jax: ${{ contains(matrix.config.device, 'jax') }}
      jax_version: ${{ inputs.jax_version }}
      install_tensorflow: ${{ contains(matrix.config.device, 'tf') }}
      tensorflow_version: ${{ inputs.tensorflow_version }}
      keras_version: ${{ inputs.tensorflow_version }}
      install_pytorch: ${{ contains(matrix.config.device, 'torch') }}
      pytorch_version: ${{ inputs.pytorch_version }}
      install_pennylane_lightning_master: false
      pytest_test_directory: pennylane/devices/tests
      pytest_coverage_flags: ${{ inputs.pytest_coverage_flags }}
      pytest_additional_args: --device=${{ matrix.config.device }} --shots=${{ matrix.config.shots }}


  upload-to-codecov:
    runs-on: ubuntu-latest

    needs:
      - torch-tests
      - autograd-tests
      - tf-tests
      - jax-tests
      - core-tests
      - all-interfaces-tests
      - zx-tests
      - qcut-tests
      - qchem-tests
      - legacy-tests
      - gradients-tests
      - data-tests
      - device-tests

    steps:
      # Checkout repo so Codecov action is able to resolve git HEAD reference
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      - name: Down Coverage Artifacts
        uses: actions/download-artifact@v3

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3

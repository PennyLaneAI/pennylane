import os

import numpy as np
import pytest

from pennylane import qchem

from openfermion import QubitOperator


me_1 = np.array(
    [
        [0.0, 0.0, 0.0, 0.0, 0.25],
    ]
)

me_3 = np.array(
    [
        [0.0, 0.0, 0.0, 0.0, 0.25],
        [0.0, 1.0, 1.0, 0.0, -0.25],
        [0.0, 2.0, 2.0, 0.0, 0.25],
        [1.0, 0.0, 0.0, 1.0, -0.25],
        [1.0, 1.0, 1.0, 1.0, 0.25],
        [1.0, 2.0, 2.0, 1.0, -0.25],
        [2.0, 0.0, 0.0, 2.0, 0.25],
        [2.0, 1.0, 1.0, 2.0, -0.25],
        [2.0, 2.0, 2.0, 2.0, 0.25],
        [0.0, 1.0, 0.0, 1.0, 0.5],
        [1.0, 0.0, 1.0, 0.0, 0.5],
    ]
)

me_6 = np.array(
    [
        [0.0, 0.0, 0.0, 0.0, 0.25],
        [0.0, 1.0, 1.0, 0.0, -0.25],
        [0.0, 2.0, 2.0, 0.0, 0.25],
        [0.0, 3.0, 3.0, 0.0, -0.25],
        [0.0, 4.0, 4.0, 0.0, 0.25],
        [0.0, 5.0, 5.0, 0.0, -0.25],
        [1.0, 0.0, 0.0, 1.0, -0.25],
        [1.0, 1.0, 1.0, 1.0, 0.25],
        [1.0, 2.0, 2.0, 1.0, -0.25],
        [1.0, 3.0, 3.0, 1.0, 0.25],
        [1.0, 4.0, 4.0, 1.0, -0.25],
        [1.0, 5.0, 5.0, 1.0, 0.25],
        [2.0, 0.0, 0.0, 2.0, 0.25],
        [2.0, 1.0, 1.0, 2.0, -0.25],
        [2.0, 2.0, 2.0, 2.0, 0.25],
        [2.0, 3.0, 3.0, 2.0, -0.25],
        [2.0, 4.0, 4.0, 2.0, 0.25],
        [2.0, 5.0, 5.0, 2.0, -0.25],
        [3.0, 0.0, 0.0, 3.0, -0.25],
        [3.0, 1.0, 1.0, 3.0, 0.25],
        [3.0, 2.0, 2.0, 3.0, -0.25],
        [3.0, 3.0, 3.0, 3.0, 0.25],
        [3.0, 4.0, 4.0, 3.0, -0.25],
        [3.0, 5.0, 5.0, 3.0, 0.25],
        [4.0, 0.0, 0.0, 4.0, 0.25],
        [4.0, 1.0, 1.0, 4.0, -0.25],
        [4.0, 2.0, 2.0, 4.0, 0.25],
        [4.0, 3.0, 3.0, 4.0, -0.25],
        [4.0, 4.0, 4.0, 4.0, 0.25],
        [4.0, 5.0, 5.0, 4.0, -0.25],
        [5.0, 0.0, 0.0, 5.0, -0.25],
        [5.0, 1.0, 1.0, 5.0, 0.25],
        [5.0, 2.0, 2.0, 5.0, -0.25],
        [5.0, 3.0, 3.0, 5.0, 0.25],
        [5.0, 4.0, 4.0, 5.0, -0.25],
        [5.0, 5.0, 5.0, 5.0, 0.25],
        [0.0, 1.0, 0.0, 1.0, 0.5],
        [0.0, 3.0, 2.0, 1.0, 0.5],
        [0.0, 5.0, 4.0, 1.0, 0.5],
        [1.0, 0.0, 1.0, 0.0, 0.5],
        [1.0, 2.0, 3.0, 0.0, 0.5],
        [1.0, 4.0, 5.0, 0.0, 0.5],
        [2.0, 1.0, 0.0, 3.0, 0.5],
        [2.0, 3.0, 2.0, 3.0, 0.5],
        [2.0, 5.0, 4.0, 3.0, 0.5],
        [3.0, 0.0, 1.0, 2.0, 0.5],
        [3.0, 2.0, 3.0, 2.0, 0.5],
        [3.0, 4.0, 5.0, 2.0, 0.5],
        [4.0, 1.0, 0.0, 5.0, 0.5],
        [4.0, 3.0, 2.0, 5.0, 0.5],
        [4.0, 5.0, 4.0, 5.0, 0.5],
        [5.0, 0.0, 1.0, 4.0, 0.5],
        [5.0, 2.0, 3.0, 4.0, 0.5],
        [5.0, 4.0, 5.0, 4.0, 0.5],
    ]
)


@pytest.mark.parametrize(
    ("n_spin_orbs", "s2_me_expected"),
    [(1, me_1), (3, me_3), (6, me_6)],
)
def test_spin2_matrix_elements(n_spin_orbs, s2_me_expected, tol):
    r"""Test the calculation of the matrix elements of the two-particle spin operator
    :math:`\hat{s}_1 \cdot \hat{s}_2` implemented by the function `'_spin2_matrix_elements'`"""

    sz = np.where(np.arange(n_spin_orbs) % 2 == 0, 0.5, -0.5)

    s2_me_result = qchem._spin2_matrix_elements(sz)

    assert np.allclose(s2_me_result, s2_me_expected, **tol)


terms_jw = {
    (): (0.75 + 0j),
    ((1, "Z"),): (0.375 + 0j),
    ((0, "Z"), (1, "Z")): (-0.375 + 0j),
    ((0, "Z"), (2, "Z")): (0.125 + 0j),
    ((0, "Z"),): (0.375 + 0j),
    ((0, "Z"), (3, "Z")): (-0.125 + 0j),
    ((1, "Z"), (2, "Z")): (-0.125 + 0j),
    ((1, "Z"), (3, "Z")): (0.125 + 0j),
    ((2, "Z"),): (0.375 + 0j),
    ((3, "Z"),): (0.375 + 0j),
    ((2, "Z"), (3, "Z")): (-0.375 + 0j),
    ((0, "Y"), (1, "X"), (2, "Y"), (3, "X")): (0.125 + 0j),
    ((0, "Y"), (1, "Y"), (2, "X"), (3, "X")): (0.125 + 0j),
    ((0, "Y"), (1, "Y"), (2, "Y"), (3, "Y")): (0.125 + 0j),
    ((0, "Y"), (1, "X"), (2, "X"), (3, "Y")): (-0.125 + 0j),
    ((0, "X"), (1, "Y"), (2, "Y"), (3, "X")): (-0.125 + 0j),
    ((0, "X"), (1, "X"), (2, "X"), (3, "X")): (0.125 + 0j),
    ((0, "X"), (1, "X"), (2, "Y"), (3, "Y")): (0.125 + 0j),
    ((0, "X"), (1, "Y"), (2, "X"), (3, "Y")): (0.125 + 0j),
}

terms_bk = {
    (): (1.125 + 0j),
    ((0, "Z"), (1, "Z")): (0.375 + 0j),
    ((1, "Z"),): (-0.375 + 0j),
    ((0, "Z"), (2, "Z")): (0.125 + 0j),
    ((0, "Z"), (1, "Z"), (2, "Z"), (3, "Z")): (-0.125 + 0j),
    ((0, "Z"), (4, "Z")): (0.125 + 0j),
    ((0, "Z"),): (0.375 + 0j),
    ((0, "Z"), (4, "Z"), (5, "Z")): (-0.125 + 0j),
    ((0, "Z"), (1, "Z"), (2, "Z")): (-0.125 + 0j),
    ((0, "Z"), (2, "Z"), (3, "Z")): (0.125 + 0j),
    ((0, "Z"), (1, "Z"), (4, "Z")): (-0.125 + 0j),
    ((0, "Z"), (1, "Z"), (4, "Z"), (5, "Z")): (0.125 + 0j),
    ((1, "Z"), (2, "Z"), (3, "Z")): (0.375 + 0j),
    ((1, "Z"), (3, "Z")): (-0.375 + 0j),
    ((2, "Z"), (4, "Z")): (0.125 + 0j),
    ((2, "Z"),): (0.375 + 0j),
    ((2, "Z"), (4, "Z"), (5, "Z")): (-0.125 + 0j),
    ((1, "Z"), (2, "Z"), (3, "Z"), (4, "Z")): (-0.125 + 0j),
    ((1, "Z"), (2, "Z"), (3, "Z"), (4, "Z"), (5, "Z")): (0.125 + 0j),
    ((4, "Z"),): (0.375 + 0j),
    ((4, "Z"), (5, "Z")): (0.375 + 0j),
    ((5, "Z"),): (-0.375 + 0j),
    ((0, "Y"), (2, "Y")): (0.125 + 0j),
    ((0, "X"), (1, "Z"), (2, "X")): (-0.125 + 0j),
    ((0, "X"), (2, "X"), (3, "Z")): (0.125 + 0j),
    ((0, "Y"), (1, "Z"), (2, "Y"), (3, "Z")): (-0.125 + 0j),
    ((0, "Y"), (1, "Z"), (2, "Y")): (-0.125 + 0j),
    ((0, "X"), (2, "X")): (0.125 + 0j),
    ((0, "X"), (1, "Z"), (2, "X"), (3, "Z")): (-0.125 + 0j),
    ((0, "Y"), (2, "Y"), (3, "Z")): (0.125 + 0j),
    ((0, "Y"), (4, "Y")): (0.125 + 0j),
    ((0, "X"), (1, "Z"), (4, "X")): (-0.125 + 0j),
    ((0, "X"), (1, "Z"), (4, "X"), (5, "Z")): (0.125 + 0j),
    ((0, "Y"), (4, "Y"), (5, "Z")): (-0.125 + 0j),
    ((0, "Y"), (1, "Z"), (4, "Y")): (-0.125 + 0j),
    ((0, "X"), (4, "X")): (0.125 + 0j),
    ((0, "X"), (4, "X"), (5, "Z")): (-0.125 + 0j),
    ((0, "Y"), (1, "Z"), (4, "Y"), (5, "Z")): (0.125 + 0j),
    ((2, "Y"), (4, "Y")): (0.125 + 0j),
    ((1, "Z"), (2, "X"), (3, "Z"), (4, "X")): (-0.125 + 0j),
    ((1, "Z"), (2, "X"), (3, "Z"), (4, "X"), (5, "Z")): (0.125 + 0j),
    ((2, "Y"), (4, "Y"), (5, "Z")): (-0.125 + 0j),
    ((1, "Z"), (2, "Y"), (3, "Z"), (4, "Y")): (-0.125 + 0j),
    ((2, "X"), (4, "X")): (0.125 + 0j),
    ((2, "X"), (4, "X"), (5, "Z")): (-0.125 + 0j),
    ((1, "Z"), (2, "Y"), (3, "Z"), (4, "Y"), (5, "Z")): (0.125 + 0j),
}


@pytest.mark.parametrize(
    ("electrons", "orbitals", "mapping", "terms_exp"),
    [
        (2, 4, "JORDAN_wigner", terms_jw),
        (3, 6, "bravyi_KITAEV", terms_bk),
    ],
)
def test_spin2(electrons, orbitals, mapping, terms_exp, monkeypatch):
    r"""Tests the correctness of the total spin observable :math:`\hat{S}^2`
    built by the function `'spin2'`.

    The parametrized inputs are `.terms` attribute of the total spin `QubitOperator.
    The equality checking is implemented in the `qchem` module itself as it could be
    something useful to the users as well.
    """

    S2 = qchem.spin2(electrons, orbitals, mapping=mapping)

    S2_qubit_op = QubitOperator()
    monkeypatch.setattr(S2_qubit_op, "terms", terms_exp)

    assert qchem._qubit_operators_equivalent(S2_qubit_op, S2)


@pytest.mark.parametrize(
    ("electrons", "orbitals", "msg_match"),
    [
        (-2, 4, "'electrons' must be greater than 0"),
        (0, 4, "'electrons' must be greater than 0"),
        (3, -6, "'orbitals' must be greater than 0"),
        (3, 0, "'orbitals' must be greater than 0"),
    ],
)
def test_exception_spin2(electrons, orbitals, msg_match):
    """Test that the function `'spin2'` throws an exception if the
    number of electrons or the number of orbitals is less than zero."""

    with pytest.raises(ValueError, match=msg_match):
        qchem.spin2(electrons, orbitals)

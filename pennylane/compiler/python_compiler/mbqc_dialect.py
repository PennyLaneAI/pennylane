# Copyright 2025 Xanadu Quantum Technologies Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
This module contains the definition of the MBQC dialect for the Python compiler.

The MBQC dialect is a set of operations and types used to represent measurement-based
quantum-computing instructions in the xDSL framework.

It was initially generated by xDSL (using the ``xdsl-tblgen`` tool) starting from the
catalyst/mlir/include/MBQC/IR/MBQCDialect.td file in the catalyst repository.
"""

from enum import StrEnum

from xdsl.dialects.builtin import Float64Type, IntegerType
from xdsl.ir import Dialect, EnumAttribute
from xdsl.irdl import (
    AnyAttr,
    BaseAttr,
    EqAttrConstraint,
    IRDLOperation,
    irdl_attr_definition,
    irdl_op_definition,
    operand_def,
    opt_prop_def,
    prop_def,
    result_def,
)

from pennylane.compiler.python_compiler.quantum_dialect import QubitType


class MeasurementPlaneEnum(StrEnum):
    """Enum containing supported measurement-plane attributes"""

    XY = "XY"
    YZ = "YZ"
    ZX = "ZX"


@irdl_attr_definition
class MeasurementPlaneAttr(EnumAttribute[MeasurementPlaneEnum]):
    """Planes in the Bloch sphere representation with support for arbitrary-basis measurements"""

    name = "mbqc.measurement_plane"


@irdl_op_definition
class MeasureInBasisOp(IRDLOperation):
    """A parametric single-qubit projective measurement in an arbitrary basis."""

    name = "mbqc.measure_in_basis"

    in_qubit = operand_def(QubitType())

    plane = prop_def(BaseAttr(MeasurementPlaneAttr))

    angle = operand_def(EqAttrConstraint(Float64Type()))

    postselect = opt_prop_def(AnyAttr())

    mres = result_def(EqAttrConstraint(IntegerType(1)))

    out_qubit = result_def(QubitType())

    assembly_format = """
            `[` $plane `,` $angle `]` $in_qubit (`postselect` $postselect^)? attr-dict `:` type(results)
        """


MBQCDialect = Dialect(
    "mbqc",
    [
        MeasureInBasisOp,
    ],
    [
        MeasurementPlaneAttr,
    ],
)

"""
This file is automatically generated by xDSL and not meant to be modified.

It was generated from /Users/mehrdad.malek/tmp/catalyst_dialect.json
"""

# ruff: noqa: F403, F405

from xdsl.dialects.builtin import *
from xdsl.ir import *
from xdsl.irdl import *


@irdl_attr_definition
class ArrayListType(ParametrizedAttribute, TypeAttribute):
    """a dynamically resizable array"""

    name = "catalyst.arraylist"


@irdl_op_definition
class AssertionOp(IRDLOperation):
    """Asserts condition at runtime."""

    name = "catalyst.assert"

    assertion = operand_def(EqAttrConstraint(IntegerType(1)))

    error = prop_def(BaseAttr(StringAttr))


@irdl_op_definition
class CallbackCallOp(IRDLOperation):
    name = "catalyst.callback_call"

    assembly_format = """
        $callee `(` $inputs `)` attr-dict `:` functional-type($inputs, results)
      """

    callee = prop_def(AnyAttr())

    inputs = var_operand_def(AnyOf((AnyAttr(), AnyAttr())))

    arg_attrs = opt_prop_def(AnyAttr())

    res_attrs = opt_prop_def(AnyAttr())

    v1 = var_result_def(AnyAttr())


@irdl_op_definition
class CallbackOp(IRDLOperation):
    """Operation denoting a symbol to refer to user callbacks."""

    name = "catalyst.callback"

    sym_name = prop_def(BaseAttr(StringAttr))

    function_type = prop_def(AnyAttr())

    id = prop_def(IntegerAttr.constr(type=EqAttrConstraint(IntegerType(64))))

    argc = prop_def(IntegerAttr.constr(type=EqAttrConstraint(IntegerType(64))))

    resc = prop_def(IntegerAttr.constr(type=EqAttrConstraint(IntegerType(64))))

    arg_attrs = opt_prop_def(AnyAttr())

    res_attrs = opt_prop_def(AnyAttr())

    body = region_def()


@irdl_op_definition
class CustomCallOp(IRDLOperation):
    """CustomCall operation"""

    name = "catalyst.custom_call"

    assembly_format = """
        `fn` `(`$call_target_name`)` `(` $inputs `)`
          attr-dict `:` functional-type(operands, results)
      """

    inputs = var_operand_def(AnyAttr())

    call_target_name = prop_def(BaseAttr(StringAttr))

    number_original_arg = opt_prop_def(AnyAttr())

    v2 = var_result_def(AnyAttr())


@irdl_op_definition
class LaunchKernelOp(IRDLOperation):
    name = "catalyst.launch_kernel"

    assembly_format = """
        $callee `(` $inputs `)` attr-dict `:` functional-type($inputs, results)
      """

    callee = prop_def(AnyAttr())

    inputs = var_operand_def(AnyOf((AnyAttr(), AnyAttr())))

    arg_attrs = opt_prop_def(AnyAttr())

    res_attrs = opt_prop_def(AnyAttr())

    v3 = var_result_def(AnyAttr())


@irdl_op_definition
class ListDeallocOp(IRDLOperation):
    """Deallocate the underlying memory of an arraylist."""

    name = "catalyst.list_dealloc"

    assembly_format = """ $list attr-dict `:` type($list) """

    list = operand_def(BaseAttr(ArrayListType))


@irdl_op_definition
class ListInitOp(IRDLOperation):
    """Initialize a dynamically resizable arraylist."""

    name = "catalyst.list_init"

    assembly_format = """ attr-dict `:` type($list) """

    list = result_def(BaseAttr(ArrayListType))


@irdl_op_definition
class ListLoadDataOp(IRDLOperation):
    """Get the underlying memref storing the data of an array list."""

    name = "catalyst.list_load_data"

    assembly_format = """ $list attr-dict `:` type($list) `->` type($data) """

    list = operand_def(BaseAttr(ArrayListType))

    data = result_def(AnyAttr())


@irdl_op_definition
class ListPopOp(IRDLOperation):
    """Remove an element from the end of an array list and return it."""

    name = "catalyst.list_pop"

    assembly_format = """ $list attr-dict `:` type($list) `->` type($result) """

    list = operand_def(BaseAttr(ArrayListType))

    result = result_def(AnyAttr())


@irdl_op_definition
class ListPushOp(IRDLOperation):
    """Append an element to the end of an array list."""

    name = "catalyst.list_push"

    assembly_format = """ $value `,` $list attr-dict `:` type($list) """

    value = operand_def(AnyAttr())

    list = operand_def(BaseAttr(ArrayListType))


@irdl_op_definition
class PrintOp(IRDLOperation):
    """Prints numeric values or constant strings at runtime."""

    name = "catalyst.print"

    val = opt_operand_def(AnyAttr())

    const_val = opt_prop_def(BaseAttr(StringAttr))

    print_descriptor = prop_def(EqAttrConstraint(UnitAttr()))


Catalyst_Dialect = Dialect(
    "catalyst",
    [
        AssertionOp,
        CallbackCallOp,
        CallbackOp,
        CustomCallOp,
        LaunchKernelOp,
        ListDeallocOp,
        ListInitOp,
        ListLoadDataOp,
        ListPopOp,
        ListPushOp,
        PrintOp,
    ],
    [
        ArrayListType,
    ],
)

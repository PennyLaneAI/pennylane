"""
This file is automatically generated by xDSL and not meant to be modified.

It was generated from /Users/mehrdad.malek/tmp/qec_dialect.json
"""

# ruff: noqa: F403, F405

from xdsl.dialects.builtin import (
    IntegerAttr,
    IntegerType,
)
from xdsl.ir import Dialect, ParametrizedAttribute
from xdsl.irdl import (
    AnyAttr,
    BaseAttr,
    EqAttrConstraint,
    IRDLOperation,
    irdl_attr_definition,
    irdl_op_definition,
    operand_def,
    opt_operand_def,
    prop_def,
    region_def,
    result_def,
    var_operand_def,
    var_result_def,
)


@irdl_attr_definition
class LogicalInit(ParametrizedAttribute):
    """The initial state of a logical qubit such as |0⟩, |1⟩, |+⟩, |−⟩, |Y⟩, |-Y⟩, |m⟩, or |m̅⟩."""

    name = "qec.enum"


@irdl_op_definition
class FabricateOp(IRDLOperation):
    """Fabricate axillary qubits from qubit factories."""

    name = "qec.fabricate"

    assembly_format = """
            $init_state attr-dict `:` type($out_qubits)
        """

    init_state = prop_def(BaseAttr(LogicalInit))

    out_qubits = var_result_def(AnyAttr())


@irdl_op_definition
class LayerOp(IRDLOperation):
    """A layer operation"""

    name = "qec.layer"

    initArgs = var_operand_def(AnyAttr())

    results = var_result_def(AnyAttr())

    region = region_def("single_block")


@irdl_op_definition
class PPMeasurementOp(IRDLOperation):
    """Pauli Product Measurement on qubits."""

    name = "qec.ppm"

    assembly_format = """
          $pauli_product (`(` $rotation_sign^ `)`)? $in_qubits (`cond` `(` $condition^ `)`)? attr-dict `:` type($out_qubits)
        """

    pauli_product = prop_def(AnyAttr())

    rotation_sign = prop_def(AnyAttr())

    in_qubits = var_operand_def(AnyAttr())

    condition = opt_operand_def(EqAttrConstraint(IntegerType(1)))

    mres = result_def(EqAttrConstraint(IntegerType(1)))

    out_qubits = var_result_def(AnyAttr())


@irdl_op_definition
class PPRotationOp(IRDLOperation):
    """Pauli Product Rotation on qubits."""

    name = "qec.ppr"

    assembly_format = """
          $pauli_product `(` $rotation_kind `)` $in_qubits attr-dict (`cond` `(` $condition^ `)`)? `:` type($out_qubits)
        """

    pauli_product = prop_def(AnyAttr())

    rotation_kind = prop_def(IntegerAttr.constr(type=EqAttrConstraint(IntegerType(16))))

    in_qubits = var_operand_def(AnyAttr())

    condition = opt_operand_def(EqAttrConstraint(IntegerType(1)))

    out_qubits = var_result_def(AnyAttr())


@irdl_op_definition
class PrepareStateOp(IRDLOperation):
    """Initialize existing qubits into a given state."""

    name = "qec.prepare"

    assembly_format = """
          $init_state $in_qubits attr-dict `:` type($out_qubits)
        """

    init_state = prop_def(BaseAttr(LogicalInit))

    in_qubits = var_operand_def(AnyAttr())

    out_qubits = var_result_def(AnyAttr())


@irdl_op_definition
class SelectPPMeasurementOp(IRDLOperation):
    """Multiplexed Pauli product measurement."""

    name = "qec.select.ppm"

    assembly_format = """
          `(` $select_switch `,` $pauli_product_0 `,` $pauli_product_1 `)` $in_qubits attr-dict `:` type($out_qubits)
        """

    select_switch = operand_def(EqAttrConstraint(IntegerType(1)))

    pauli_product_0 = prop_def(AnyAttr())

    pauli_product_1 = prop_def(AnyAttr())

    in_qubits = var_operand_def(AnyAttr())

    mres = result_def(EqAttrConstraint(IntegerType(1)))

    out_qubits = var_result_def(AnyAttr())


@irdl_op_definition
class YieldOp(IRDLOperation):
    """Return results from a layer region"""

    name = "qec.yield"

    assembly_format = """
            attr-dict ($results^ `:` type($results))?
        """

    results = var_operand_def(AnyAttr())


QEC = Dialect(
    "qec",
    [
        FabricateOp,
        LayerOp,
        PPMeasurementOp,
        PPRotationOp,
        PrepareStateOp,
        SelectPPMeasurementOp,
        YieldOp,
    ],
    [
        LogicalInit,
    ],
)

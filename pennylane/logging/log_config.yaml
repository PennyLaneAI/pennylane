version: 1
disable_existing_loggers: yes

# Define formatters which specify the message output structure
formatters:
  standard:
    format: "[%(asctime)s] - %(name)s - %(levelname)s - %(message)s"
  detailed:
    format: "\x1b[38;4;45m[%(asctime)s][%(levelname)s][<PID %(process)d:%(processName)s>] - %(name)s.%(funcName)s()::\"%(message)s\"\x1b[0m"
  custom:
      '()': "pennylane.logging.formatters.formatter.LogFormatter"

# Define handler for each logger. This specifies the associated class to use as a handler, the logging level associated with said handler, the formatter to use defined earlier, where to send the output (associated with the choice of handler class), and additional metadata needed. For exaemple, the following handlers output to both files (using RotatingFileHandler) and the output streams (using StreamHandler).
handlers:
  #############################################################################
  #   File handlers
  #############################################################################
  info_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: INFO
    formatter: standard
    filename: tmp/logs/info.log
    maxBytes: 10485760 # 10MB
    backupCount: 20
    encoding: utf8

  warn_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: WARN
    formatter: standard
    filename: tmp/logs/warn.log
    maxBytes: 10485760 # 10MB
    backupCount: 20
    encoding: utf8

  error_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: ERROR
    formatter: detailed
    filename: tmp/logs/errors.log
    maxBytes: 10485760 # 10MB
    backupCount: 20
    encoding: utf8

  debug_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: standard
    filename: tmp/logs/debug.log
    maxBytes: 10485760 # 10MB
    backupCount: 20
    encoding: utf8

  root_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: standard
    filename: tmp/logs/logs.log
    maxBytes: 10485760 # 10MB
    backupCount: 20
    encoding: utf8

  #############################################################################
  #   Stream handlers
  #############################################################################
  console:
    class: logging.StreamHandler
    level: DEBUG
    formatter: detailed
    stream: ext://sys.stdout

  console_custom:
    class: logging.StreamHandler
    level: DEBUG
    formatter: custom
    stream: ext://sys.stdout

  error_console:
    class: logging.StreamHandler
    level: ERROR
    formatter: detailed
    stream: ext://sys.stderr

# Not fully sure what this does yet. Maybe sets the global handlers and overal level?
root:
  level: DEBUG
  handlers: [console_custom] #[console, error_console, root_file_handler]
  propagate: yes

# This controls the loggers that are included in the code-base. It allows override and control over the default behaviours to better suit a need (e.g. to adjust the format, output, etc). I assume this specializes the cases to be excpetional modificaitons of the `root` definitions earlier.
loggers:
  jax:
    level: INFO
    handlers: [console_custom]
    propagate: no
  pennylane:
    level: DEBUG
    handlers: [console_custom]
    propagate: no
  main:
    level: DEBUG
    handlers: [console_custom] #[info_file_handler, warn_file_handler, error_file_handler, debug_file_handler]
    propagate: no
